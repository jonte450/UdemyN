AWS CloudFormation - Section Introduction
Learn about the subject infrastructure as a code.
CloudFormation when using Elastic Beanstalk.



CloudFormation Overview

Infrastructure as Code

-Currently, we have been doing a lot of manual work

-All this manual work will be very though to reproduce
 -In another region
 -In another AWS account
 -Within the same region if everything was deleted

-Wouldn't it be great, if all our infrastructure was... code?

-That code would be deployed and create / update / delete our
 infrastructure



What is CloudFormation

-CloudFormation is a declarative way of outlining your
 AWS Infrastructure, for any resources
 (most of them are supported)

-For example, within a CloudFormation template, you say:
 -I want a security group
 -I want two EC2 machines using this security group
 -I want two Elastic IPs for these EC2 machines
 -I want an S3 bucket
 -I want a load balancer (ELB) in front of these machines

-Then CloudFormation creates those for you, in the right order,
 with the exact configuration that you specify


Benefits of AWS CloudFormation (1/2)
-Infrastructure as code
 -No resources are manually created, which is excellent for
  control

 -The code can be versioned controlled for example using git

 -Changes to the infrastructure are reviewed through code


-Cost
 -Each resources within the stack is stagged with an indentifier
  so you can easily see how much a stack costs you

 -You can estimate the costs of your resources using the
  CloudFormation template

 -Savings strategy: In Dev, you could automation deletion
  of templates at 5 PM and recreated at 8 AM, safely


Benefits of AWS CloudFormation(2/2)

-Productivity
 -Ability to destroy and re-create an infrastructure on the 
  cloud on the fly
 -Automated generation of Diagram for your templates!
 -Declarative programming
  (no need to figure out ordering and orchestration)


-Separation of concern: create many stacks for many apps,
 and many layers. Ex:
 -VPC stacks
 -Network stacks
 -App stacks

-Don't re-invent the wheel
 -Leverage existing templates on the web!
 -Leverage the documentation



How CloudFormation Works

-Templates have to be uploaded in S3 and then referenced
 in CloudFormation

-To update a template, we can't edit previous ones.
 We have to re-upload a new version of the template
 to AWS


-Stacks are indentified by a name

-Deleting a stack deletes every single artifact
 that was created by CloudFormation



Deploying CloudFormation Templates

-Manual way:
 -Editing templates in the CloudFormation Designer
 -Using the console to input parameters, etc


-Automated way:
 -Editing templates in a YAML file
 -Using the AWS CLI (Command Line Interface) to deploy the
  templates
 -Recommended way when you fully want to automate your flow


CloudFormation Building Blocks

-Templates component (one course section for each):
1. Resources: your AWS resources declared in the template
   (MANDATORY)

2. Parameters: the dynamic inputs for your template

3. Mappings: the static variables for your template

4. Outputs: References to what has been created

5. Conditionals: List of conditions to perform resource
   				 creation

6. Metadata


 
Template helpers:
1. References
2. Functions


Note:
This is introduction to CloudFormation
-It can take over 3 hours to properly learn and master
 CloudFormation

-This section is meant so you get a good idea of how it works

-We'll be slightly less hands-on than in other sections


-We'll  learn everything we need to answer questions for the 
 exam

-The exam does not require you to actually write CloudFormation


-The exam expects you to understand how to read CloudFormation







CloudFormation Create Stack Hands On
Introductry Example

-We're going to create a simple EC2 instance.
-Then we're going to create to add an Elastic IP to it
-And we're going to add two security groups to it
-For now, forget about the code syntax
-We'll look at the structure of the file later on


We'll see how in no-time, we are able to get started with
CloudFormation!

We can which resources that was created.

We create a stack.
With the new resources.
Template is ready.
Upload a template file.
first-stack




CloudFormation Update and Delete Stack Hands On
Type
AvailabilityZone
Adding Elastic Ip.
Replace current Template
Enter the value of a parameter.

Change Set Preview
What is the difference between the new template and the old one
The stack is in the update process.




YAML Crash Course
-YAML and JSON are the languages you can use for
 CloudFormation

-JSON is horrible for CF
-YAML is great in so many ways
-Let's learn a bit about it!

-Key value Pairs
-Nested objects
-Support Arrays
-Multi line strings
-Can include comments!




CloudFormation Resources
-Resources are the core of your CloudFormation template
 (MANDATORY)

-They represent the different AWS Components that will be 
 created and configured

-Resources are declared and can reference each other

-AWS figures out creation, updates and deletes of resources
 for us

-There are over 224 types of resources (!)
-Resource types indentifiers are of the form:
 -AWS:: aws-product-name::data-type-name


How do I find resources documentation?
-I can't teach you all of the 224 resources, but I can teach 
 you how to learn how to use them.

-All the resources can be found here:
 http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.com


-Then, we just read the docs :)

-Example here(for an EC2 instance):
http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html

We have an JSON form and a YAML form.


FAQ for resources
-Can I create a dynamic amount of resources?
>No. you can't. Everything in the CloudFormation template
 has to be declared. You can't perform code generation there

-Is every AWS Service supported?
>Almost. Only a select few niches are not there yet
>You can work around that using AWS Lambda Custom Resources





CloudFormation Parameters

What are parameters?
-Parameters are a way to provide inputs to your 
 AWS CloudFormation template

-They're important to know about if:
 -You want to reuse your templates across the company
 -Some inputs can not be determined ahead of time

-Parameters are extremly powerful, controlled, and can prevent
 errors from happening in your templates thanks to types


When should you use a parameter?

-Ask yourself this:
 -Is this CloudFormation resource configuration likely to change
  in the future?

 -If so, make it a parameter

-You won't have to re-upload a template to change its content
 :)


Parameters Settings


Parameters can be controlled by all these settings:
Type:
 -String
 -Number
 -CommanDelimitedList
 -List<Type>
 -AWS Parameter
  (to help catch invalid values -- match against existing
   values in the AWS Account)

-Description
-Constraints
-ConstraintDescription (String)
-Min/MaxLength
-Min/MaxVal
-Defaults
-AllowedValues(array)
-AllowedPattern(regexp)
-NoEcho(Boolean)

How to Reference a Parameter
-The Fn::Ref function can be leveraged to reference parameters
-Parameters can be used anywhere in a template
-The shorthand for this in YAML is !Ref
-The function can also reference other elements within the
 template

Concept: Psuedo Parameters

-AWS offers us psuedo parameters in any CloudFormation template
-These can be used at any time and are enabled by default


Reference Value 			Example Return Value
AWS::AccountId				1234567890
AWS::NoValue				Does not return a value
AWS::Region 				us-east-2
AWS::StackName 				MyStack




CloudFormation Mappings
-Mappings are fixed variables within your CloudFormation 
 Template

-They're very handy to differentiate between enviroments
 (dev vs prod), regions (AWS regions), AMI types, etc

-All the values are hardcoded within the template

-Example:
    Mappings:
      Mapping01:
      	Key01:
      	  Name: Value01
      	Key02:
      	  Name: Value02
      	Key03:
      	  Name: Value03


When would you use mappings vs parameters ?
-Mappings are great when you know in advance all the 
 values that can be taken and that they can be deduced
 from variables such as
  -Region
  -Availability Zone
  -AWS Account
  -Enviroment (dev vs prod)
  -Etc...


-They allow safer control over the template

-Use parameters when the values are really user specific

Fn::FindInMap
Accessing Mapping Values
-We use Fn::FindInMap to return a named value from a specific
 key
-!FindInMap [ MapName , TopLevelKey, SecondLevelKey ]




CloudFormation Outputs
What are outputs?
-The Outputs section declares optional outputs values that we
 can import into other stacks (if you export them first)

-You can also view the outputs in the AWS Console or in using
 the AWS CLI

-They're very useful for example if you define a network
 CloudFormation, and output the variables such as
 VPC ID, and your Subnet IDs

-It's the best way to perform some collabration cross stack,
 as you let expert handle their own part of the stack


-You can't delete a CloudFormation Stack if its outputs
 are being referenced by another CloudFormation stack


Outputs Example
-Creating a SSH Security Group as part of one template
-We create an output that references that security group

Outputs:
 StackSSHSecurityGroup:
   Description: The SSH Security Group for our Company 
   Value: !Ref MyCompanyWideSSHSecurityGroup
   Export:
   Name: SSHSecurityGroup


Cross Stack Reference

-We then create a second template that leverages that
 security group

-For this, we use the Fn::ImportValue function

-You can't delete the underlying stack until all the
 references are deleted too.



CloudFormation Conditions
-Conditions are used to control the creation of resources
 or outputs based on a condition

-Conditions can be whatever you want them to be, but common
 ones are:
  -Enviroment(dev/test/prod)
  -AWS Region
  -Any parameter value 


-Each condition can reference another condition, parameter value
 or mapping



How to define a condition?
 Conditions:
  CreateProdResources: !Equal [ !Ref EnvType, prod]
   -The logical ID is for you to choose.
    It's how you name condition

   -The intrinsic function (logical) can be any of the 
    following:
     -Fn::And
     -Fn::Equals
     -Fn::If
     -Fn::not
     -Fn::Or


Using a Condition

-Conditions can be applied to resources / outputs / etc

Resources:
 MountPoint:
  Type: "AWS::EC2::VolumeAttachment"
  Condition: CreateProdResources




CloudFormation Intrinsic Functions
Must Know Intrinsic Functions

-Ref
-Fn::GetAt
-Fn::FindInMap
-Fn::ImportValue
-Fn::Join
-Fn::Sub
-Condition Functions (Fn::If, Fn::Not, Fn::Equals, etc...)


Fn::Ref
 -The Fn::Ref function can be leveraged to reference
  -Parameters => returns the value of the parameter
  -Resources => returns the physical ID of the
   underlying resource (ex:EC2 ID)
  -The shorthand for this in YAML is !Ref

 DbSubnet1:
  Type: AWS::EC2::Subnet
  Properties:
  	VpcId: !Ref MyVPC



Fn::GetAtt
-Attributes are attached to any resources you create

-To know the attributes of your resources, the best place
 to look at is the documentation

-For example: the AZ of an EC2 machine!

Resources:
 EC2Instance: 
 	Type: "AWS::EC2::Instance"
 	Properties:
 		ImageId: ami-1234567
 		InstanceType: t2.micro

NewVolume:
  Type: "AWS::EC2::Volume"
  Condition: CreateProdResources
  Properties:
  	Size: 100
  	AvailabilityZone:
  	   !GetAtt EC2Instance.AvailabilityZone



Fn:FindInMap
Accessing Mapping Values

-We use Fn::FindInMap to return a named value from a specific 
 key

-!FindInMap [ MapName, TopLevelKey, SecondLevelKey]


Fn::ImportValue

-Import values that are exported in other templates
-For this, we use the Fn::ImportValue function

Resources:
 MySecureInstance:
 	Type: AWS::EC2::Instance
 	Properties:
 		AvailabilityZone: us-east-1a
 		ImageId: ami-a4c7edb2
 		InstanceType: t2.micro
 		SecurityGroups:
 			-!ImportValue: SSHSecurityGroup



Fn::Join

-Join values with a delimiter

 !Join [delimiter, [comma-delimited list of values]]


 -This creates "a:b:c" 

  !Join[":" [a,b,c]]


Fn::Sub

-Fn::Sub, or !Sub as a shorthand, is used to substitute 
 variables from a text. It's a very handy function that
 will allow you to fully customize your templates

-For example, you can combine Fn::Sub with References or AWS
 Psuedo variables!


-String must contain ${VariableName} and will substitute them


!Sub
  -String
  -{Var1name: VarValue, Var2Name: Var2Value}

!Sub String


Condition Functions

Conditions:
	CreateProdResources: !Equals [ !Ref EnvType, prod]

-The logical ID is for you to choose.
 It's how you name condition

-The intrinsic function (logical) can be any of the following:
 -Fn::And
 -Fn::Equals
 -Fn::If
 -Fn::Not
 -Fn::Or




CloudFormation Rollbacks

-Stack Creation Fails:
 	-Default: everything roll back (gets deleted).
 	 We can look at the log

 	-Option to disable rollback and troubleshoot what
 	 happend


-Stack Update Fails:
 -The stack automatically rolls back to the previous
  known working state
 
 -Ability to see in the log what happened and error
  messages


Use a template that triggers a failures.




CloudFormation ChangeSets, Nested Stack & StackSet

ChangeSets

-When you update a stack, you need to know what changes before
 it happens for greater confidence

-ChangeSets won't say if the update will be successful

1. Create Change set

2. View Change set

3. (optional) Create Additional change sets

4. Execute Change set



Nested stacks

-Nested stacks are stacks as part of other stacks

-They allow you to isolate repeated patterns / common components
 in separate stacks and call them from other stacks

-Example:
  -Load Balancer configuration that is re-used
  -Security Group that is re-used

-Nested stacks are considered best practice

-To update a nested stack, always update the parent (root stack)

CloudFormation - Cross vs Nested Stacks

-Cross Stacks
 -Helpful when stacks have different lifecycles
 -Use Outputs Export and Fn::ImportValue
 -When you need to pass export values to many
  stacks (VPC Id , etc...)

-Nested Stacks
 -Helpful when components must be re-used
 -Ex-re-use how to properly configure an
  Application Load Balancer

 -The nested stack only is important to the higher
  level stack (it's not shared)

CloudFormation - StackSets 
-Create, update, or delete stacks
 across multiple accounts and regions
 with a single operation

-Adminstator account to create StackSets

-Trusted accounts to create, update, delete
 stack instances from StackSets

-When you update a stack set, all 
 associated stack instances are
 updated throughout all accounts and
 regions




Quiz 15: CloudFormation Quiz

Question 1:
To make your infrastructure created with CloudFormation evolve over time, you should do which of the following?

Answer:
   Upload a new version of a CloudFormation template
   with the modified code and apply it in the
   CloudFormation Console



Question 2:
Before being used by CloudFormation, your templates must be uploaded


Answer:
   In AWS S3


Question 3:
You need to specify the order in which your CloudFormation template should create resources

Answer:
	False



Question 4:
Which of the following is mandatory for a CloudFormation template?
    
Answer:
  Resources


 Question 5:
Which intrinsic function should you use to retrieve the DNS name of a Load Balancer created with CloudFormation?


Answer:
   Fn::GetAtt




Question 6:
Considering these mappings:

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-6869aa05
    us-west-2:
      HVM64: ami-7172b611
    us-west-1:
      HVM64: ami-31490d51
    eu-west-1:
      HVM64: ami-f9dd458a
 
  EnvironmentToInstanceType:
    development:
      instanceType: t2.micro
    production:
      instanceType: m4.large



And this Resources block:


Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]


What is wrong in this template?
Answer:
The parameter EnvironmentName is missing



Question 7:
The !Ref function can be used to reference the following except...


Answer:
	Conditions




Question 8:
The following block:

Fn::Join:
        - ''
        - [IPAddress=, !Ref 'IPAddress']
With the parameter IPAddress being 10.0.0.1.

Will generate...
Answer:
IPAddress=10.0.0.1


Question 9:
I'm trying to delete a stack but it seems I can't because other stacks reference its exported outputs. What should you do?


Answer:
  Delete the other stacks referencing the exported outputs first



Question 10:
I tried to create an exported output:

Outputs:
  StackSSHSecurityGroup:
    Description: The SSH Security Group for our Company
    Value: !Ref MyCompanyWideSSHSecurityGroup
    Export:
      Name: SSHSecurityGroup 

But it seems I get an error. It says "SSHSecurityGroup" output already exists. What should you do?

Answer:
   Exported output names must be unique within your region


 



