AWS Security - Section Introduction
The exam will ask very much about security.
Encryption properly.


Encryption 101

Why encryption?
Encryption in flight(SSL)
-Data is encrypted before sending and decrypted after
 receiving

-SSL certificated help with encryption (HTTPS)

-Encryption in flight ensures no MITM (man in the middle attack)
 can happen


Server side encryption at rest

-Data is encrypted after being received by the server

-Data is decrypted before being sent

-It is stored in an encrypted form thanks to a key
 (usually a data key)

-The encryption / decryption keys must be managed somewhere
 and the server must have access to it


Client side encryption
-Data is encrypted by the client and never decrypted
 by the server

-Data will be decrypted by a receiving client

-The server should not be able to decrypt the data

-Could leverage Envelope Encryption



KMS Overview

AWS KMS (Key Management Service)
-Anytime you hear "encryption" for an AWS service,
 it's most likely KMS

-Easy way to control access to your data,
 AWS manages keys for us

-Fully integrated with IAM for authorization

-Seamlessy integrated into:
 -Amazon EBS: encrypt volumes
 -Amazon S3: Server side encryption of objects
 -Amazon Redshift: encryption of data
 -Amazon RDS: encryption of data
 -Amazon SSM: Parameter store
 -Etc..

-But you can also use the CLI / SDK


KMS - Customer Master Key (CMK) Types
-Symmetric (AES-256 keys)
 -First offering of KMS, single encryption key that is used
  to Encrypt and Decrypt

 -AWS services that are integrated with KMS use 
  Symmetric CMKs

 -Necessary for envelope encryption

 -You never get access to the Key unencrypted
  (must call KMS API to use)

-Asymmetric (RSA & ECC key pairs)
 -Public (Encrypt) and Private Key (Decrypt) pair
 -Used for Encrypt/Decrypt, or Sign/Verify operations
 -The public key is downable, but you can access
  the Private Key unencrypted

 -Use case: encryption outside AWS by users who can't
            call the KMS API


AWS KMS (Key Management Service)
-Able to fully manage the keys & policies:
 -Create
 -Rotation policies
 -Disable
 -Enable

-Able to audit key usage(using CloudTrail)

-Three types of Customer Master Keys (CMK):
 -AWS Managed Service Default CMK:free
 -User Keys created in KMS: $1 / month
 -User Keys imported (must be 256-bit symmetric key):$1/month

-+ pay for API call to KMS ($0.03 / 1000 calls)

AWS KMS 101

-Anytime you need to share sensitive information... use KMS
 -Database passwords
 -Credentials to external service
 -Private Key of SSL certificates

-The value in KMS is that the CMK used to encrypt data can
 never be retrieved by the user, and the CMK can be rotated for
 extra security


-Never ever store your secrets in plaintext, especially
 in your code!

-Encrypted secrets can be stored in the code / enviroment 
 variables

-KMS can help in encrypting up to 4KB of data per call

-If data > 4 KB, use envelope encryption


-To give access to KMS to someone:
 -Make sure the Key Policy allows the user
 -Make sure the IAM Policy allows the API calls



Copying Snapshots across regions

We have an EBS Volume encrypted to a specific region.
And you want to copy that you have to create a Snapshot
And copy that to the other region.

KMS Key Policies

-Control access to KMS keys, "similar" to S3 bucket policies

-Difference: you cannot control access without them

-Default KMS Key Policy:
 -Created if don't provide a specific KMS Key Policy
 -Complete access to the key to the 
  root user = entire AWS account

 -Gives access to the IAM policies to the KMS key

-Custom KMS Key Policy:
 -Define users, roles that can access the KMS key
 -Define who can administer the key
 -Useful for cross-account access of your KMS key


Copying Snapshots across accounts

1.Create a Snapshot, encrypted with your own CMK
2.Attach a KMS Key Policy to authorize cross-account access
3.Share the encrypted snapshot
4.(in target) Create a copy of the Snapshot, encrypt it
   with a KMS Key in your account
5.Create a volume from the snapshot




KMS Hands On w/CLI
We check AWS managed keys.
We cannot rotate the keys.

Customer managed keys where we create our own keys.
We have symmetric or a Asymmetric keys.

We can define key administrators.



KMS Encryption Patterns and Envelope Encryption
How does KMS work?
API - Encrypt and Decrypt

We use the encrypt API.
We then check the IAM permissions.
After that we get that the encrypted and decrypted message back.

Envelope Encryption

-KMS Encrypt API call has a limit of 4 KB
-If you want to encrypt > 4 KB, we need to use 
 Envelope Encryption

-The main API that will help us is the GenerateDateKey API

-For the exam: anything over 4 KB of data that needs to be
               encrypted must use the 
               Envelope Encryption === GenerateDateKey API


Deep dive into Envelope Encryption GenerateDateKey API

We will call GenerateDateKey API.
KMS will check the IAM permissions.
Send back plaintext data key.
We also get back the Encrypted DEK and the Encrypted File.

Deep dive into Envelope Encryption Decrypt envelope data
We will call the Decrypt API.
KMS will check the IAM permissions.
And back we will get the plaintext.

Encryption SDK
-The AWS Encryption SDK implemented Envelope Encryption for us
-The Encryption SDK also exists as a CLI tool we can install
-Implementations for Java, Python, C, JavaScript

-Feature - Data Key Caching
 -re-use data keys instead of creating new ones for each
  encryption

 -Helps with reducing the number of calls to KMS with a
  security trade-off

 -Use LocalCryptoMaterialsCache
  (max age, max bytes, max number of messages)


KMS Symmetric - API Summary
-Encrypt:encrypt up to 4 KB of data through KMS

-GenerateDateKey: generates a unique symmetric data key (DEK) 
 -returns a plaintext copy of the data key
 -AND a copy that is encrypted under the CMK that you specify

-GenerateDateKeyWithoutPlaintext:
 -Generate a DEK to use at some point(not immediately)
 -DEK that is encrypted under the CMK that you specify 
  (must use Decrypt later)

-Decrypt: decrypt up to 4 KB of 
 (including Data Encryption Keys)
 
-GenerateRandom: Returns a random byte string



Encryption SDK CLI Hands On
We must use python with pip.
We have to run the encrypt command.
vi hello.txt



KMS Limits

KMS Request Quotas
-When you exceed a request quota, you get a 
 ThrottlingException:
 You have exceeded the rate at which you may call KMS.
 Reduce the frequency of your calls.
 (Service: AWSKMS; status code 400; 
  Error Code: ThrottlingException; Request ID: <ID>)

-To respond, use exceptional backoff (backoff and retry)

-For cryptographic operations, they share a quota

-This includes requests made by AWS on your behalf
 (ex: SSE-KMS)

-For GenerateDateKey, consider using DEK caching
 from the Encryption SDK

-You can request a Request Quotas increase through API
 or AWS support




KMS and AWS Lambda Practice
Go into the Lambda function.
Leverage the tutorial key.
Add a enviroment variable.
We can encrypt our enviroment variable.



S3 Security Advanced

S3 Encryption for Objects
-There are 4 methods of encrypting objects in S3
 -SSE-S3: encrypts S3 objects using keys 
  handled & managed by AWS

 -SSE-KMS: leverage AWS Key Management Service to manage
  encryption keys

 -SSE-C: when you want to manage your own encryption keys
 -Client Side Encryption

-It's important to understand which ones are adapted to which
 situation for the exam


SSE-KMS
-SSE-KMS: encryption using keys handled & managed by KMS
-KMS Advantages: user control + audit trail
-Object is encrypted server side
-Must set header: "x-amz-server-side-encryption":"aws:kms"


SSE-KMS Deep Dive
-SSE-KMS leverages the GenerateDateKey & Decrypt KMS API calls

-These KMS API calls will show up in CloudTrail, helpful for
 logging

-To perform SSE-KMS, you need:
 -A KMS Key Policy that authorizes the user / role
 -An IAM policy that authorizes access to KMS
 -Otherwise you will get an access denied error

-S3 calls to KMS for SSE-KMS count against your KMS limits
 -If throttling, try exponetial backoff
 -If throttling, you can request an increase in KMS limits
 -The service throttling is KMS, not Amazon S3


S3 Bucket Policies - Force SSL
-To force SSL, create an S3 bucket policy with a DENY on
 the condition aws:SecureTransport = false

-Note: Using an allow on aws:SecureTransport= true
       would allow anonymous GetObject if using SSL


S3 Bucket Policy - Force Encryption of SSE-KMS
1.Deny incorrect encryption header: make sure it includes
  aws:kms (== SSE-KMS)

2.Deny no encryption header to ensure objects are not uploaded
  un-encrypted

-Note: could swap 2) for S3 default encryption of SSE-KMS


SSM Parameter Store Overview

SSM Parameter Store
-Secure storage for configuration and secrets
-Optional Seamless Encryption using KMS
-Serverless, scalable, durable, easy SDK
-Version tracking of configurations / secrets
-Configuration management using path & IAM
-Notifications with CloudWatch Events
-Integration with CloudFormation


SSM Parameter Store Hierarchy
-/my-department/
 -my-app/
  -dev/
   -db-curl
   -db-password
  -prod/
   -db-url
   -db-password
 -other-app/
-/other-department/
-/aws/reference/secretsmanager/secret_ID_in_Secrets_Manager
-/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2


Parameters Policies (for advanced parameters)
-Allow to assign a TTL to a parameter (expiration date) to force
 updating or deleting sensitive data such as passwords

-Can assign multiple policies at a time




SSM Parameter Hands On (CLI)
Centerlize the parameters.
Reference your parameters.




SSM Parameter Store Hands On (AWS Lambda)
We are gonna create a function called ssm.
We need to have an IAM role.
import boto.
boto.client.getparameters
AccessdeniedException.
hello-world.ssm
Add an inline policy.



Secrets Manager - Overview

AWS Secrets Manager
-Newer service, meant for storing secrets
-Capability to force rotation of secrets every X days
-Automate generation of secrets on rotation(uses Lambda)
-Integration with Amazon RDS (MySQL, PostgreSQL, Aurora)
-Secrets are encrypted using KMS

-Mostly meant for RDS integration



Secrets Manager - Hands On
Storing Secrets to the AWS manager.
With Secrets manager you can rotate your secrets.
A little bit easier to use.
Credentials for RDS database.
Whenever you have a database.
You have key value pairs.
You need to give your secret a name.



SSM Parameter Store vs Secrets Manager
-Secrets Manager($$$):
 -Automatic rotation of secrets with AWS Lambda
 -Integration with RDS, Redshift, DocumentDB
 -KMS encryption is mandatory
 -Can integration with CloudFormation

-SSM Parameter Store($):
 -Simple API
 -No secret rotation
 -KMS encryption is optional
 -Can integration with CloudFormation
 -Can pull a Secrets Manager secret using the SSM 
  Parameter Store API



CloudWatch Logs Encryption
-You can encrypt CloudWatch logs with KMS keys
-Encryption is enabled at the log group level, by
 associating a CMK with a log group, either
 when you create the log group or after it exists

-You cannot associate a CMK with a log group using the
 CloudWatch console

-You must use the CloudWatch Logs API:
 -associate-kms-key: if the log group already exists
 -create-log-group: if the log group doesn't exist yet




CodeBuild Security
-To access resources in your VPC, make sure you specify a
 VPC configuration for your CodeBuild

-Secrets in CodeBuild:

-Don't store them as plaintext in enviroment variables

-Instead...
 -Enviroment variables can reference parameters store parameters
 -Enviroment variables can reference secrets manager secrets





Quiz 25: Security & Encryption Quiz

Question 1:
To enable encryption in flight, we need to have

Answer
  an HTTPS endpoint with a SSL certificate



Question 2:
Server side encryption means that the data is sent encrypted to the server first

Answer:
   false


Question 3:
In server side encryption, only the encryption happens on the server. Where does the decryption happen?

Answer:
    The Server


Question 4:
In client side encryption, the server must know our encryption scheme to accept the data

Answer:
  false


Question 5:
We need to create User Keys in KMS before using the encryption features for EBS, S3, etc...


Answer:
  false
   we can use the aws managed service keys in KMS


Question 6:
We'd like to encrypt 400 KB of data. We should use

Answer:
   AWS KMS GenerateDateKey call and encrypt client side


Question 7:
We'd like our Lambda function to have access to a database password. We should


Answer:
   Have it as an encrypted enviroment variable and decrypt
   it at runtime

Question 8:
We would like to audit the values of an encryption value over time

Answer:
  We should use SSM Parameter Store



Question 9:
An EC2 instance is trying to download a file from S3 that is encrypted with SSE:KMS. It's getting a denied exception, even though the IAM policy allows access to that S3 object. What do you recommend?

Answer:
   Add permissions for KMS: Decrypt


Question 10:
You would like to store secrets and have automatic rotation. What's your recommendation?

Answer:
 Secrets Manager


automatic rotation is natively supported in Secrets Manager

Question 11:
How to encrypt existing CloudWatch Logs?

Answer: 
  Encrypt with them with the associate-kms-key API call
  
  https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html




   
  
