Scaling Out with Overlay Networking
-Just choose --driver overlay when creating network
-For container-to-container traffic inside a single Swarm
-Optional IPSec (AES) encryption on network creation
-Each service can be connected to multiple networks
 -(e.g. front-end, back-end)

docker network create --driver overlay mydrupal

Create a network.

docker service create --name psql --network mydrupal
-e POSTGRES_PASSWORD=mypass postgres

docker service create --name drupal --network mydrupal -p 80:80 drupal

sudo watch docker service ls
sudo docker service ps drupal


Scaling Out with Routing Mesh

Routing Mesh
-Routes ingress (incomming) packets for a Service to proper Task
-Spans all nodes in Swarm
-Use IPVS from Linux Kernel
-Load balances Swarm Services across their Tasks
-Two ways this works:
-Container-to-container in a Overlay network (uses VIP)
-External traffic incomming to published ports (all nodes listen)

sudo docker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2

sudo docker service ps search

curl localhost:9200

Routing Mesh Cont.
-This is stateless load balancing
-This LB is at OSI Layer 3 (TCP), not Layer 4 (DNS)
-Both limitation can be overcome with:
-Nginx or HAProxy LB proxy, or:
-Docker Enterprise Edition, which comes with built-in L4 web proxy



Quiz 8: Quiz on Docker Swarm Basics

Question 1:
How do we initially begin a Swarm, activating Swarm Mode on a single node?

Answer:
  docker swarm init

This is how a single node initializes a swarm, and is automatically joined as a manager.


Question 2:
To scale up a service to multiple containers, which of the following commands would you use?

Answer:
  
  docker service update <service name> --replicas#


  We can use this command to update the service and "scale up" the service to a desired amount. Bonus: a shorter way to do it is with a "docker service scale" command.


Question 3:

Once a node joins a swarm as a worker, it would have to leave the swarm and re-join to become a manager.

Answer:
   False

We can update a role of another node from a manager node using the "docker node update --role" command.



Assignment: Create A Multi-Service-Multi-Node Web App
-Using Docker's Distributed Voting App
-use swarm-app-1 directory in our course repo for requirements
-1 volume, 2 networks, and 5 services needed
-Create the commands needed, spin up services, and test app
-Everything is using Docker Hub images, so no data needed on Swarm
-Like many computer thingsm this 1/2 art form and 1/2 science



Assignment Answers: Create A Multi-Service-Multi-Node Web App

docker network create -d overlay backend
docker network create -d overlay frontend

docker service create --name vote -p 80:80 --network frontend --replicas 2 bretfisher/examplevotingapp_vote

docker service create --name redis --network frontend redis:3.2

docker service create --name db --network backend -e POSTGRES_HOST_AUTH_METHOD=trust --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4

docker service create --name worker --network frontend --network backend bretfisher/examplevotingapp_worker:java

docker service create --name result --network backend -p 5001:80 bretfisher/examplevotingapp_result



Swarm Stacks and Production Grade Compose

-In 1.13 Dockers adds a new layer of abstraction to Swarm 
 called Stacks

-Stacks accept Compose files as their declarative definition 
 for services, networks, and volumes

-We use docker stack deploy rather then docker service create

-Stacks manages all those objects for us, including overlay 
 network per stack. Adds stack name to start of their name

-New deploy: key in Compose file. Can't do build:

-Compose now ignores deploy:, Swarm ignores build:

-docker-compose cli not needed on Swarm server

swarm-stack-1# vim example-voting-app-stack.yml

docker stack deploy -c example-voting-app-stack.yml voteapp

docker stack services voteapp

docker stack deploy -c example-voting-app-stack.yml voteapp


Secrets Storage for Swarm: Protecting Your Enviroment Variables
-Easiest "secure" solution for storing secrets in Swarm
-What is a Secret?
 -Usernames and passwords
 -TLS certificates and keys
 -SSH keys
 -Any data you would prefer not be "on front page of news"
-Supports generic strings or binary content up to 500Kb in
 size
-Dosen't require apps to be rewritten

-As of Docker 1.13.0 Swarm Raft DB is encrypted on disk
-Only stored on disk on Manager nodes
-Default is Managers and Workers "control plane" is 
 TLS + Mutual Auth
-Secrets are first stored in Swarm, then assigned to a 
 Service(s)  
-Only containers in assigned Service(s) can see them
-They look like files in container but are actually in-memory fs
-/run/secrets/<secret_name> or /run/secrets/<secret_alias>
-Local docker-compose can use file-based secrets, but not secure


Using Secrets in Swarm Services

docker secret create psql_user psql_user.txt
echo "myDBpassWORD" | docker secret create psql_pass- 
docker service create --name psql --secret psql_user 
--secret psql_pass 
-e POSTGRES_PASSWORD_FILE=/run/secrets/psql_pass
-e POSTGRES_USER_FILE=/run/secrets/psql_user postgres

docker service update --secret-rm

Using Secrets with Swarm Stacks
docker service create --name search --replicas 3 -p 9200:9200
elasticsearch:2

docker stack deploy -c docker-compose.yml mydb


Assignment: Create A Stack with Secrets and Deploy

Assignment Answers: Create A Stack with Secrets