Check Our Docker Install and Config
Containers are the fundamental building block.
How they are different

-Check versions of our docker cli and engine
-Create a Nginx (web server) container
-Learn common container management commands
-Learn Docker networking basics
-Requirements: Have latest Docker installed from last Section

You are in the proper terminal.

First command docker version.
This simply returns the engine.
Our Docker Command line returning the value.
The fact is you get a server means that you can talk with the docker server.

docker info tells about configuration about info image,containers.

And command docker is returning all the commands you can do.
We have this on the top called management commands.
There are so much commands we have the management commands to organize it.

-command: docker versions
  -verified cli can talk to engine
-command: docker info
  -most config values of engine
-docker command line structure
  -old (still works): docker <command> (options)
  -new: docker <command> <sub-command> (options)


The engine is called is daemon.


Starting a Nginx Web Server
-image vs. container
-run/stop/remove containes
-check container logs and processes

Difference between Image vs. Container
-An Image is the application we want to run
-A Container is an instance of that image running as a process
-You can have many containers running off the same image
-In this lecture our image will be the Nginx web server
-Docker's default image "registry" is called Docker Hub (hub.docker.com)

docker container run --publish 80:80 nginx

Docker looked for an image called nginx.
1.Downloaded image 'nginx' from Docker Hub.
2.Started a new container from that image.
3.Opened port 80 on the host IP
4.Routes that traffic to the container IP, port 80

This command below will make the container to run in the background.

sudo docker container run --publish 80:80 --detach nginx

docker container ls

run vs. start
Each time we run we started a new container.
If we don't specify we get's funny names.

docker container run --publish 80:80 --deatch --name webhost nginx.

docker container log webhost
Gives all the logs from the webserver.

docker cointainer --help.
docker container ls -a
docker container -rm three first id of a container.


Debrief: What Happens When We Run a Container
There are so much more happenings in the background.
1.Looks for that image locallyh in the image cache, dosen't find anything
2.Then looks in remote image repository(defaults to Docker Hub)
3.Downloas the latest version (nginx: latest by default).
4.Creates new container based on that image and prepares to start
5. Gives it a virtual IP on a private network inside docker engine
6.Opens up port 80 on host and forwards to port 80 in container
7.Starts container by using the CMD in the image Dockerfile


Customize the networking.
Opening up the port that we specified.


Conatiner vs VM: It's Just a Process
Containers aren't Mini-VM's
-They are just processes
-Limited to what resources they can access
-Exit when process stops

We are going to call Mongo in the background.
docker top mongo

ps aux "Show me all running processes".

Assignment: Manage Multiple Containers
-docs.docker.com and --help are your friend
-Run a nginx, a mysql, and a httpd(apache) server
-Run all of them --detach (or -d), name them with --name
-nginx should listen on 80:80, httpd on 8080:80, mysql on 3306:3306
-When running mysql, use the --env option (or -e) to pass in 
MYSQL_RANDOM_ROOT_PASSWORD=yes
-Use docker container logs on mysql to find the random password it created on startup
-Clean it all up with docker container stop and docker container rm
(both can accept multiple names or ID's)
-Use docker container ls to ensure everything is correct before
 and after cleanup

Assignment Answers: Manage Multiple Containers
-This lecture is Answers to previous assignment
-Try the previous lecture(Assignment details) first on your own before watching this video
-Forcing yourself to figure this assignment out by studying doc.docker.com,etc. will help this stuff stick in your brain better then just watching me do it.

docker container run -d -p 3306:3306 --name db --e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql

docker container logs db

Generated Root Password

docker container run -d --name webserver -p 8080:80 httpd
docker ps

docker container run -d --name proxy -p 80:80 nginx

docker ps

curl localhost

curl localhost:8080

docker container stop container-id

docker ps -a

docker container rm container-id

docker ps -a
docker image ls

Question 1:
If you wanted to view running containers as well as containers that you have stopped and not removed, what command would you use?

sudo docker container ls -a

Quiz 2: Container Quiz 1

What does the -d flag do in a docker run command?
Answer:
Correct, it's the short version of --detach. By running in detached mode, we are able to have access to our command line when the container spins up and runs. Without it, we would have logs constantly fed onto the screen.


Question 3:
Would the following two commands create a port conflict error with each other?
Answer:

docker container run -p 80:80 -d nginx
docker container run -p 8080:80 -d nginx
Answer: No
Correct, just because the containers are both listening on port 80 inside (the right number), there is no conflict because on the host they are published on 80, and 8080 separately (the left number).


Question 4:
I ran 'docker container run -p 80:80 nginx' and my command line is gone and everything looks frozen. Why?

Correct, everything is normal. You didn't specify the -d flag to detach it in the background, and there aren't any logs coming across the screen because you haven't connected to the published port yet, so Nginx has nothing to log about

What's Going On In Containers: CLI Processing Monitoring
-docker container top -process list in one container
-docker container inspect - details of one container config
-docker container stats - performance stats for all containers

docker container run -d --name nginx nginx
docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

docker container ls
docker container top

Top lists all processes in the container.

docker container stats

We are getting back the streaming performance of the containers.

We used docker container to list all proc

Getting a Shell Inside Containers: No Need for SSH
-docker container run -it : Start new container interactively
-docker container exec -it: Run additional command in existing container
-Different Linux distros in container

How do i get into the container?
docker container run -it
-t psuedo-tty: simulates a real terminal, like what SSH does
-i interactive: Keep session open to receive terminal input

docker container run -it --name proxy nginx bash
This will give you bash shell if run with it, it will give you a terminal inside the running container

You can download a Ubuntu image to.
But the Ubuntu is very minimal.
When i exit the container will stop running.
docker container exec -it mysql bash
Now you are in the container mysql.
Jumping into containers to check for errors.
Alpine is a linux distribution and is very small.

-docker container run -it : start new container interactively
-docker container exec -it: run addtional command in existing container


Docker Networks: Concepts for Private and Public Comms in Containers

Docker Networks: Concepts
-Review of docker container run -p
-For local dev/testing, networks usually "just work"
-Quick port check with docker container port <container>
-Learn concepts of Docker Networking
-Understand how network packets move around Docker

Docker Networks Defaults
-Each container connected to a private virtual network "bridge"
-Each virtual network routes through NAT firewall on host IP
-All containers on a virtual network can talk to each other without -p
-Best practice is to create a new virtual network for each app:
 -network "my_web_app" for mysql and php/apache containers
 -network "my_api" for mongo and nodejs containers


Docker Networks Cont.

-Batteries included, But removable
 -Default work well in many cases, but easy to swap out parts to
  customize it

-Make new virtual networks

-Attach containers to more then one virutal network (or none)

-Skip virtual networks and use host IP (--net=host)

-Use different Docker Network drivers to gain new abilities

-and much more

docker container inspect --format '{{ .NetworkSettings.IPAdress}}' webhost

Docker Networks: Concepts
 -Review of docker container run -p
 -For local dev/testing, networks usually "just work"
 -Quick port check with docker container port <container>
 -Learn concepts of Docker Networking
 -Understand how network packets move around Docker



Docker Networks: CLI Management Of Virtual Networks
-Show networks docker network ls
-Inspect a network docker network inspect
-Create a network docker network create --driver
-Attach a network to container docker network connect
-Detach a network from container docker network disconnect

docker network ls shows all listed networks-

--network host 
It gains performance by skipping virtual network but sacrifies security 
of container model

--network none
removes eth0 and only leaves you with localhost interface in container

docker network create
Spawns a new virtual network for you to attach containers to

network driver
Built-in or 3rd party extensions that give you virtual network features

docker network connect 
Dynamically creates a NIC in a container on an existing virtual network

docker network disconnect
Dynamically removes a NIC from a container on a specific virtual network

Docker Networks: Default Security
-Create your apps so frontend/backen sit on same Docker network
-Their inter-communication never leaves host
-All externally exposed ports closed by default
-You must manually exposr via -p, which is better default security!
-This gets even better later with Swarm and Overlay networks

Docker Networks: CLI Management
-Show networks docker network ls
-Inspect a network docker network inspect
-Create a network docker network create --driver
-Attach a network to container docker network connect
-Detach a network from container docker network disconnect






Docker Networks: DNS and How Containers Find Each Other

Docker Networks: DNS
-Understand how DNS is the key to easy inter-container comms
-See how it works by default with custom networks
-Learn how to use --link to enable DNS on default bridge network

Forget IP'S
Static IP's and using IP's for talking to containers is an anti-pattern.
Do your best to avoid it.

Docker DNS
Docker daemon has a built-in DNS server that containers use by default

DNS Default Names
Docker defaults the hostname to the container's name but you can also set
aliases

Docker Networks: DNS
-Containers shouldn't rely on IP's for inter-communication
-DNS for friendly names is built-in if you can use custom networks
-You're using custom networks right?
-This gets way easier with Docker Compose in future Section


Quiz 3: Container Quiz 2

Question 1:
Which command would we use to get an overview look of information about a specific container like Networks, IP address, mounts, and current status?

Answer:
  docker container inspect

This shows you the container configuration. It can also be modified to only return a specific piece of data using the —format flag.

Question 2:
In order to connect to a shell inside of a container, you should use docker ssh to get inside.

Answer:
   False

Correct! By using the 'docker exec -it <container> sh' (or bash) command on a container, we can connect to a shell from inside it.


Question 3:
If you wanted multiple containers to be able to communicate with each other on the same docker host, which network driver would you use?

Answer:
  bridge

Right, the default bridge network driver allow containers to communicate with each other when running on the same docker host.



Assignment: Using Containers for CLI Testing

-Know how to use -it to get shell in container
-Understand basics of what a Linux distribution is like Ubuntu and CentOs
-Know how to run a container

Assignment: CLI App Testing

-Use different Linux distro containers to check curl cli tool version
-Use two different terminal windows to start bash in both centos:7 and 
 ubuntu:14:04, using -it
-Learn the docker container --rm option so you can save cleanup

-Ensure curl is installed and on latest version for that distro
 -ubuntu: apt-get update && apt-get install curl
 -centos:yum update curl
-Check curl --version

Assignment Answers: Using Containers for CLI Testing

sudo docker container run --rm -it centos:7 bash
yum update curl

sudo docker container run --rm -it ubuntu:14.04 bash
apt-get update && apt-get install -y curl


FIXME: Bug in alpine affects nslookup

Assignment: DNS Round Robin Test
-Know how to use -it to get shell in container
-Understand basics of what a Linux distribution is like Ubuntu and CentOS
-Know how to run a container
-Understand basics of DNS records


Assignment: DNS Round Robin Test
-Ever since Docker Engine 1.11, we can have multiple containers
 on a created network respond to the same DNS address

-Create a new virtual network (default bridge driver)

-Create two containers from elasticsearch:2 image

-Research and use -network-alias search when creating them to give them
 an addtional DNS name to respond to

-Run alpine nslookup search with --net to see the two containers list for
 the same DNS name

-Run centos curl -s search:9200 with --net multiple times until
 you see both "name" fields show
 

Assignment Answers: DNS Round Robin Test
docker network create dude
docker container run -d --net dude  --net-alias search elasticsearch:2
docker container ls

docker container run --rm --net dude alpine nslookup search
docker container run --rm --net dude centos curl -s search:9200

