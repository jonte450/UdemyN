Interview Question #2-Container With Most Water

You are given an array of positive integers where
each integer represents the height of a vertical
line on a chart. Find two lines which together
with the x-axis forms a container that would
hold the greatest amount of water.

Return the area of water it would hold.

[1,8,6,2,9,4]

We need to return the area.
area = L x W

Let's verify the constraints.

Does the thickness of the lines affect the area?
No, assume they take up no space.

Do the left and right sides of the graph counts as walls?
No, the sides cannot be used to form a container.

We cannot take the sides as walls.
We must form a wall using an integer in the array.

Does a higher line inside our container affect our area?
No, lines inside a container don't affect the area.
Can we use a lower number as a wall.


Step 2: Write out some test cases

Comming up with Test Cases
[7,1,2,3,9]

We have to use 7 and 9.
We get the Width from subtracting indexes
4-0 = 4
7x4 = 28

[] = 0
[7] = 0

[6,9,3,4,5,8]



Thinking Through A Logical Brute Force Solution


Step 3: Figure out a solution without code

Similar to the previous question.
Maximum value question.
We calculate all the Areas and then after take the 
biggest Areas.

[7,1,2,3,9].

area = lxw.
min(a,b)

x(bi-ai)

a is our first pointer
b is our second pointer.
min(7,1) x (1-0) = 1.
max = 1
min(7,2) x (2-0) = 4
max = 4
min(7,3)x(3-0) = 9
max = 9
min(7,9) x (4-0) = 28
max(28)


min(1,2) x (2-1) = 1

min(1,3) x (3-1) = 2

min(1,9) x (4-1) = 3

min(2,3) x (3-2) = 2

min(2,9) x (4-2) = 4

min(3,9) x (4-3) = 3



Coding Out Our Brute Force Solution

My solution:

function(nums):
maxArea = 0;
for(int i = 0; i < nums.length; i++){
	int pointer_a = nums[i];
	for(int j = i + 1; j < nums.length; j++){
	 pointer_b = nums[j];
	 area = min(pointer_a,pointer_b)*(j-i);
	 if(area > maxArea){
	  maxArea = area;
	 }

	}
	return maxArea;
}


Teacher solution:

const getMaxWaterContainer = function(heights){
  let maxArea = 0;
  for(let p1 = 0; p1 < heights.length; p1++){
   for(let p2 = p1 +1; p2 < heights.length;p2++){
     const height = math.min(heights[p1],heights[p2]);
     const width = p2-p1;
     area = height*width;
     maxArea = math.max(maxArea,area); 
   }
  }
  return maxArea;	
}


Stepping Through Our Code
We console.log out our p1.
p2 never get's logged out.

time: O(n^(2))
space: O(1)





Thinking About Our Optimal Solution
Is this same approach gonna help us.
Learn a new technique called shifting pointers.

[4,8,1,2,3,9]
area = min(a,b) x (bi-ai).
Width has no impact.
With shrinking width is impact of the lesser value
gives us a larger area.
Real calculation.

We make the optimization by have pointer b at
the last element in the array and we only move
the a pointer.

t: O(n).

We have considering with pointers to move.




Coding Our Optimal Solution And Testing On LeetCode

const getMaxWaterContainer = function(heights){
let p1 = 0, p2 = height.length-1, maxArea = 0;
while(p1 < p2){
	const height = Math.min(heights[p1], heights[p2]);
	const width = p2 - p1;
	const area = height * width;
	maxArea = math.max(maxArea,area);
	if(heights[p1] < heights[p2]){
	 p1++;
	}else{
	 p2--;
	}
}
return maxArea;
}

