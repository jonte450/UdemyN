Appendix Arrays:

Arrays Introduction:

Containers:
lookup O(1)
push O(1)
Insert O(n)
delete O(n)

const strings = ['a','b','c','d'];
//4*4 = 16 bytes of storage

strings[2] go to the array strings and grab the third Item.

//push
string.push('e');

Push operation adds to the end of the array.
O(1) operation.

//pop
strings.pop();
Remove from the end of the array.
//O(1)

//unshift
strings.unshift('x')
Just add x at the beginning at the array
//O(n)
We must shift the elements one step.

//splice
strings.splice(2,0,'alien')//O(n)



Static Arrays vs Dynamic Arrays 
Two Types of Arrays.
Limitation with static Arrays.
Going to only have a limit of places in the Arrays.

Dynamic Arrays allows us to copy to a new location.
Copy the Array

// C++
int a[20];
int b[5] {1,2,3,4,5}

Copy the entire Array to create space for it.

Dynamic Arrays is the best maybe.
C++ is faster.

Append can be O(n).


Implementing An Array

Not crucial for the interview.
Build the fondations for you.
Create an Array-Class.
Data-Structures are things we can build from scratch.
Most data-structures are build of other data-structures.
constructor() 2 data-points.
this.data = {}.
Most common is to access the Array.
Create a new instance from the Array.
NewArray.

push Method.
this.data[this.length].
this.length++ to increase the length when adding array.
return this.length.
Pop-method delete the last item.
Decrease the length of our data.
return the item.



Delete method.
Delete the item and shifts the index.
shiftItems() means some functions in a class.
O(n) operations.
Loop over the array.
this.data[i] = this.data[i+1];
delete this.data[this.length-1]
this.length-- to decrease the array.




class MyArray {
  constructor() {
    this.length = 0;
    this.data = {};
  }
  get(index) {
    return this.data[index];
  }
  push(item) {
    this.data[this.length] = item;
    this.length++;
    return this.data;
  }
  pop() {
    const lastItem = this.data[this.length - 1];
    delete this.data[this.length - 1];
    this.length--;
    return lastItem;
  }
  deleteAtIndex(index) {
    const item = this.data[index];
    this.shiftItems(index);
    return item;
  }
  shiftItems(index) {
    for (let i = index; i < this.length - 1; i++) {
      this.data[i] = this.data[i + 1];
    }
    console.log(this.data[this.length - 1]);
    delete this.data[this.length - 1];
    this.length--;
  }
}

const myArray = new MyArray();
myArray.push('hi');
myArray.push('you');
myArray.push('!');
myArray.pop();
myArray.deleteAtIndex(0);
myArray.push('are');
myArray.push('nice');
myArray.shiftItems(0);
console.log(myArray);