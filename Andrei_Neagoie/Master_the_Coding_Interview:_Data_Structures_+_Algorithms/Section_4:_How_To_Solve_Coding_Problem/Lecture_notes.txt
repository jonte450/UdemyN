Section Overview
At the end of the day the company wonders if you can solve problems.
That's a technical interview is all about.
You got an interview.
And we are now getting very technical.
How to solve problems.
If we know all the algorithms,data-structures,best-programmers.
It's not a gurantee.
It's about the thought process.
You don't memorize things.
We are trying to build the fundamentals.
Big O.
Learning how to solve problems.
We are going to look at coding interview sample from Google.
The interview it's not about to memorize things.
How can you ace a the interview.

Data Structures
Algoritms

What Are Companies Looking For?
So what are companies looking after?

1.Analytic Skills
How can you think through a problem?
Knowing the thought process?

2.Coding Skills

3.Technical Skills
Do you know the pro's and con's of your solution.

4.Communication Skills
Can you communicate well with the others companies employers.

When a problem present itself we are going to google for.
Companies want's persons that know how to look for answers.
Solve problem that you independtitly.
You are going to know the why's?

What We Need For Coding Interviews
Here is big secret there are a lot more data structures.
You are most focus on things that are used the most of the time.
These are this are used the most.
Not much people are training for the interview questions.
When we learning the right data-structures.

Data Structures 
-Arrays
-Stacks
-Queues
-Linked Lists
-Trees
-Tries
-Graphs
-Hash Tables

Algorithms
-Sorting
-Dynamic Programming
-BFS + DFS (Searching)
-Recursion

Technical Interview Map: 

https://coggle.it/diagram/W5E5tqYlrXvFJPsq/t/master-the-interview-click-here-for-course-link/c25f98c73a03f5b1107cd0e2f4bce29c9d78e31655e55cb0b785d56f0036c9d1

Exercise: Google Interview
15 steps guide to solve a problem.
Because if you haven't solved a data-structure.
The point is to watch this video.

https://www.youtube.com/watch?v=XKu_SEDAykw

Exercise: Interview Question
Given 2 arrays, create a function that let's a user know (true/false) whether 
these two arrays contain any common items.

For Example:
const array1 = ['a','b','c','x'];
const array2 = ['z','y','i'];
should return false.

const array1 = ['a','b','c','x'];
const array2 = ['z','y','x'];
Should return true.

2 parameters -- arrays -- no size limit
return true or false

Show that you have all the details.
Make sure you should return true and false.
Explain your Approach.
If there is a problem with your approach.
What is the main goal with the problem.

Start with naive brute force approach.

This is a nested loop.
Comparing two differents array and we know that is O(n^(2)).
You don't have to code this part.

Tell the interviewer why this code it's not the best.

For example brute force solution.

function containsCommonItem(arr1,arr2){
	for(let i=0; i < arr1.length; i++){
	  for(let j = 0; j < arr2.length; j++){
	    if(arr1[i] === arr2[j]){
	     return true;
	    }
	  }
	}
	return false;
}
This has O(a*b).
Is it possible to make this faster.
array1 ==> obj {
	a: true,
	b: true,
	c: true,
	x: true
} 

array2[index] === obj.properties

Walk through your code and write down the steps you are going to do.
We are going to have two loops that are separeated.
Big O(a + b) and that is big savings.


function containsCommonItem2(arr1,arr2){
	//loop through first array and create object
	/where properties === items in the array
	//loop through second array and check if item in second
	//array exists on created object

}


Exercise: Interview Question 2
We wanna be sure to start to code and have an plan in mind.
We wanna loop through the first array.

function containsCommonItem2(array1,array2){
	//loop through first array and create object
	//where properties === items in the array
	let map = {};
	for(let i=0; i < arr.length; i++){
	 if(!map.[array1[i]]){
	  const item = array1[i];
	  map[item] = true;
	 }
	}

	//loop through second array and check if item in second
	//array exists on created object
	for( let j = 0; j < arr2.length; j++){
	 if(map[array[2]]){
	  return true;
	 }
	}
  return false;
}

Now this is better because we have two separate for-loops.
When it comes to time complexity this is better.
Always check for the false inputs.
How are we able to break the code.
Think of how errors may arrives.
Can we always assume on two parameters.
Discussing with the interviewer.
Don't use i and j.
Use more approiate names on the variables.
Like the user instead for array1 for example.
Think about how we could test this function.
Runs some units test.
Speak with the interviwer how to improve the code.
Make the code more readable.
When it comes to JavaSript it haves a more readable.
I would google things on how to make it more readable.

function containsCommonItem3(arr1,arr2){
	return arr1.some(item => arr2.includes(item))
}

containsCommonItem3(array1, array2)

Different solutions for the problem.
More readable and more concise.
Maybe readability is more important.
How to handle space-complexity O(1) for the first solution.
And for the space-complexity O(a) for the second solution.
The second solution is more memory heavy with map object.
And maybe split the solutions into a another function for read-ability.
It is good to talk to modularize it.

Review Google Interview
Point is to solving a problem.
Here to play around it.

// Naive
function hasPairWithSum(arr, sum){
  var len = arr.length;
  for(var i =0; i<len-1; i++){
     for(var j = i+1;j<len; j++){
        if (arr[i] + arr[j] === sum)
            return true;
     }
  }

  return false;
}

// Better
function hasPairWithSum2(arr, sum){
  const mySet = new Set();
  const len = arr.length;
  for (let i = 0; i < len; i++){
    if (mySet.has(arr[i])) {
      return true;
    }
    mySet.add(sum - arr[i]);
  }
  return false;
}

hasPairWithSum2([6,4,3,2,1,7], 9)

Optional Exercise: Google Interview On Your Own

Now that you have a better idea of the steps you need to follow to succeed in a coding interview, I recommend you do the below exercise:

1. Try and go through the 15 steps on your own and answer the same question as in the Google Interview in your own language by yourself or in front of a friend (or a fellow student on Discord). Share your code with everyone in our private Discord community in the #interview-questions channel.

2. Rewatch the Google interview video and notice how you understand the steps a lot better now. Don't worry though, by the end of this course, I am going to show you this video one last time and you will see how it will all make sense and become second nature to you even more!

Once done, keep going to the next video :)

Section Summary
Another section done.
How to solve problem effciently.
It is a muscle you can train.
Solve problems better.
We looked how a Google Interview looks like.
Communicating.
We should also get the idea to not memorizing it.
Building the fundamentals.
Talked about the others skills of what the interviewer is looking at.
Certain type of patterns will arrive.
Can be narrowed down.
 