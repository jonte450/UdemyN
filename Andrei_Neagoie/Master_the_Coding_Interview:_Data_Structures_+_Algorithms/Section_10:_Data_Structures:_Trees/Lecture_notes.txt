Trees Introduction
This a big one.
It's gonna introduce a big topic.
Tree is big datastructure.
You have child-parents directional.
Finally you can have sub-tree.

Root-1
Parent - 1 3
Child 2 3 4  67
Leaf 2 4 6 7
Sibling 2 3 4  6 7

Elements-tab.
Our web-page is created by DOM model.
Underneath we have the children.
Inside the children we have more children.
An computer back in the days used a tree-structure to decide the next move.
For us programmers you may have heard of the Abstract Syntax Tree.

Linked-List is a one type of tree but just one single route.


Binary Trees
A binary tree is something you may have be seen before.
Each child can only have one value.
In order for me to create a 

function binaryTreeNode(value){
	this.value = value;
	this.left = null;
	this.right = null;
}

We are going to code a binary tree.

A perfect binary tree we have have a parents that only have one child or two children.
Bottom layer is completely filled.

Full Binary Each node has either 0 or 2 children but never one child.

Perfect Binary trees nodes doubles on each level.
So we are doubling on each level.
By organizing each data like this we can have an efficiency.

lookup O(log N)
insert O(log N)
delete O(log N)

O(log n)

Level 0: 2^0 = 1.
Level 1: 2^(1) = 2.
Level 2: 2^(2) = 4.
Level 3: 2^(3) = 8.

What O(log n) means.
That means perhaps 8 nodes to search from.
Total nodes = 2^h - 1.
log nodes = height.
For example log 100 = 2 => 10^(2).
We don't have to check every single node.
You can just do divide and counter.

When we search through Google we this might give us the answer.

Correction: Binary Search Trees

Just a quick correction on a visual you will see in the next video. A valid BST should look like this:

   101
   /  \
  33   105
 / \    / \
9  37  104 144

** In the video it shows 54 instead of 104 **


Binary Search Trees
Binary Search Trees are great for searching.
This data-structure.
You want folders to have parentship.
To the right must be greater than the root node.
The left must be values that are lesser than the root node.
A node can only have up to two children.
Searching and lookup.
As you can imagine if we have lots of ordered children.

https://visualgo.net/bn/bst?slide=1

Balanced VS Unbalanced BST
A problem with Binary Search Trees.
You can imagine a situation with an unbalanced tree it becomes a 
Linked Lists.

Instead of being able to do the log N operation.
It becomes to slow.

We want a balanced tree becomes we want to balance the things.
We have AVL Trees and Red Black trees that makes balancing trees.
For just now just focus on the basics.

BST Pros and Cons
It's strengntss that search,inserting is faster than O(n).
No O(1) opertions we must do traversions.


Pros:
-Better than O(n).
-Ordered
-Flexible Size

Cons
-No O(1) operations

Exercise: Binary Search Tree

Solution: insert()

Solution: lookup

AVL Trees + Red Black Trees

Binary Heaps

Quick Note on Heaps

Priority Queue

Trie

Tree Review