Query Along


Starting With Query
SQL Commands Learning in the course
DDL (Data Definition Language)
-Create
-Alter
-Drop
-Rename
-Truncate
-Comment

DQL(Data Query Language)
-SELECT

DCL (Data Control Language)
-GRANT
-REVOKE

DML(Data Modification Language)
-INSERT
-UPDATE 
-DELETE
-MERGE
-CALL
-EXPLAIN PLAN
-LOCK TABLE



Exercise: Simple Queries
Question Give Me A List Of All Employees In The Company
SELECT *FROM employees;

Question How Many Departments Are There In The Company
SELECT *FROM departments;


Question How Many Times Has Employee 10001 Had A Raise
SELECT Count(emp_no)
FROM salaries
WHERE emp_no = 10001

What Title Does 10006 Have
SELECT title FROM titles
WHERE emp_no = 10006;


Renaming Columns
Get to rename columns.
Present data on a nicer way.
Make it look a little nicer.
Give it a new name.

SELECT emp_no AS "EMPLOYEE #" FROM "public"."employees"

AS keyword to rename things.


Concat Function
Remove some columns and squish togheter columns.

Select Concat(emp_no, 'is a ' , title) AS "Employee Title" FROM Titles;

Question Concatenate the first and last name of the employee into one column
-Rename the concatened column

SELECT emp_no, concat(first_name, ' ', last_name) as "Fullname" FROM employees;


What IS A Function in SQL?
When we call concat we call a function.
Giving the Paramater.
Giving the input parameter.
Run this function.
Running it against each other rows.
Look at the name at function.

A function is a set of steps that creates single values.
What types of functions are there.

Aggregate
Takes all data and produce a single value.

Operate On Many Records To Produce 1 Value.
Produces A Summary.

Scalar
Operate On Each Record Independently.

Runs against each individual row of data.



Aggregate Functions
-AVG() -- Calculates the average of a set of values
-Count() -- counts rows in a specified table or view
-Min() -- Get the minimum value of a set
-Max() -- Get the maximum value of a set
-Sum() -- calculates the sum of values

How many people are working at the company.

SELECT count(emo_no) FROM employees;


SELECT min(emp_no) FROM employees;

Question: Get the highest salary available

SELECT max(salary) FROM salaries;


Question: Get The Total Amount of Salaries Paid

SELECT sum(salary) FROM salaries;

 
Exercise: Aggregate Functions

-- BEFORE YOU START
/*
 * What database should I use for these exercises?
 * Name: Employees
 */
-- 


-- Question 1: What is the average salary for the company?
-- Table: Salaries
   SELECT AVG(salary) FROM salaries;
   63810.744836143706

-- Question 2: What year was the youngest person born in the company?
-- Table: employees
   SELECT max(birth_date) FROM employees;
   1965-02-01
   

-- BEFORE YOU START
/*
 * What database should I use for these exercises?
 * Name: France
 */
-- 

-- Question 1: How many towns are there in france?
-- Table: Towns
  SELECT count(id) FROM towns;
  36684


-- BEFORE YOU START
/*
 * What database should I use for these exercises?
 * Name: World
 */
-- 

-- Question 1: How many official languages are there?
-- Table: countrylanguage
   SELECT count(countrycode) FRom countrylanguage
   where isofficial = true;

-- Question 2: What is the average life expectancy in the world?
-- Table: country
   SELECT AVG(lifeexpectancy) FROM country;
   66.48603611164265

-- Question 3: What is the average population for cities in the netherlands?
-- Table: city
SELECT AVG(population) FROM City
WHERE countrycode = 'NLD';

185001


Commenting Your Queries
Always do this.
More and more complexity.
When you write complex queries.
Combine Functions with queries.
Practices on how documenting.

SELECT first_name, last_name FROM employees
--Filter on First Name and last_name
--And Focus one single person named Mayumi Scheueller
WHERE first_name = 'Mayumi' AND  last_name = 'Schueller';


Multi-Line
/*
*/

Single-Line
--


Common SELECT Mistakes
-Misspelling Commands
-USING; Instead of , or vice versa
-Using " Instead of '
 " Is For Tables
 ' Is For Texts
-Invalid Column Name


Filtering Data
Solidify the knowledge.
How to write the clause.

Question Get A List Of All Female Employees
SELECT first_name FROM employees
WHERE gender = 'F';


Exercise: Filtering Data

Question: How Many Female Customers Do We Have
		  From The State Of Oregon (Or) And
		  New York(NY)

SELECT count(gender) FROM customers
WHERE gender = 'F' AND (state = 'OR' OR state = 'NY');



AND and OR

The "AND" Keyword
We can chain multiple criterias to met on a single line.

You Want To Filter On 2 First Names?
Filter on the date.
There is an order of operations on AND keyword.

We have to use the OR Keyword to filter things on.

The order of the operations.
AND is going to chain the operations.
OR is going to look for something different.
OR is going to start a new filter.


The NOT Keyword
You Want To Filter On Everthing But...?
SELECT firstName, gender FROM users
WHERE NOT gender = 'm';

This can create powerful queries.

Question: How Many Customers Aren't 55?
SELECT count(age) FROM customers
WHERE Not age = '55';



Exercise: The Where	Clause
Select all records where the City column has the value "Berlin".

SELECT * FROM Customers
WHERE City = 'Berlin';

Use the NOT keyword to select all records where 
City is NOT "Berlin".

SELECT * FROM Customers
WHERE NOT City = 'Berlin';


Select all records where the CustomerID column has the value 32.
SELECT * FROM Customers
WHERE CustomerID = 32;


Select all records where the City column has the value 'Berlin' and the PostalCode column has the value 12209.



SELECT * FROM Customers
WHERE City = 'Berlin'
AND PostalCode = 12209;


Select all records where the City column has the value 
'Berlin' or 'London'.


SELECT * FROM Customers
WHERE City = 'Berlin'
OR City = 'London';



Comparision Operators

Question: Who Over The Age Of 44 Has An Income Of 100 000


Exercise: Comparision Operators

-- How many female customers do we have from the state of Oregon (OR)?
/*
* Write your query here
*/
SELECT count(gender) FROM customers
WHERE gender = 'F' AND state = 'OR';
--Result 106

-- Who over the age of 44 has an income of 100 000 or more? (excluding 44)
/*
* Write your query here
*/
Select count(age) FROM customers
WHERE age > 44 AND income >= 100000;
--2497



-- Who between the ages of 30 and 50 has an income less than 50 000?
-- (include 30 and 50 in the results)

SELECT count(income) FROM customers
WHERE income < 50000 and age >= 30 AND age <= 50;

--2362 

-- What is the average income between the ages of 20 and 50? (Excluding 20 and 50)
/*
* Write your query here
*/
SELECT AVG(income) FROM customers
WHERE age > 20 and age < 50;



Logical Operators
Done the exercise and it is going well.
Deeper understanding of operators.
-AND
-OR
-NOT

Choose the right operator.
If the both expressions is true AND then return result.

If any of the Boolean expression is true then it must return result.
OR.

It is important to have the visualisiation.
If any boolean expression is not then it is true.

There is the order of operations.
In what order can we select from.

FROM -> WHERE -> SELECT


Operator Precedence

Operators Precedence having multiple operators is
evaluated based on the priority of operators.

A Statement having multiple operators is evaluated
based on the priority of operators.

Parentheses -> Multiplication/Div -> Sub/Add -> Not -> And -> Or

If the operators have equal precedence, then the
operators are evaluated directionally, from left to right
or right to left.


Operators Precedence 2
Two separate filters filtering from Oregon and
filter from New York.

1.Filter From Oregon
2.Filter From New York
3.Filter for gender female

Direction

If the operators have equal precedence, then the
operators are evaluated directionally, from left
to right or right to left.

1.Not From NY
2.Older than 20
3.Salary > 1000
4.Gender Female

1. Ages 21 And 29
2. Not From NY
3. Not From OR
4. Salary > 1000

Filter 1
1. Younger Than 30
2. Not From NY
3. Not From OR
4. Salary > 1000

Filter 2
1. Older Than 20

OR starts a new filter.


Operators Precedence Extra

In the previous videos you learned about operator precedence an extremely important and vital concept to applying filters to your query. It is also an extremely complex chain of operations to follow at times.

Always remember the following: HIGHEST to LOWEST

1. Parenthesis

2. Arithmetic Operators

3. Concatenation Operators

4. Comparison Conditions

5. IS NULL, LIKE, NOT IN, etc.

6. NOT

7. AND

8. OR


Note here that OR is the lowest on the totem pole, we also need to make a couple of corrections, in the videos you saw the following queries:




age > 20 
AND salary > 1000
AND gender = 'f'
AND NOT state = 'NY'


The order here is:

1. Age > 20

2. Salary > 1000

3. NOT from NY

4. Gender female


You also saw:


age > 20 
OR age < 30
AND salary > 1000
AND NOT state = 'NY'
AND NOT state = 'OR'

The order here is:

1. Over 20

2. Younger than 30

3. Salary > 1000

4. NOT from NY

5. NOT from OR


If we did the following:


age > 20 
OR age < 30
AND salary > 1000
AND (NOT state = 'NY'
AND NOT state = 'OR')

The order here is (due to parenthesis):

1. NOT from NY

2. NOT from OR

3. Over 20

4. Younger than 30

5. Salary > 1000



Exercise: Operator Precendence

/*
* DB: Store
* Table: Customers
* Question: 
* Select people either under 30 or over 50 with an income above 50000
* Include people that are 50
* that are from either Japan or Australia
*/


Select firstname, income, age FROM customers 
WHERE income > 50000 AND (age > 30 or age >= 50)
and (country='Japan' Or country='Australia')



/*
* DB: Store
* Table: Orders
* Question: 
* What was our total sales in June of 2004 for orders over 100 dollars?
*/
SELECT sum(totalamount) FROM orders
WHERE totalamount>100 and (orderdate >='2004-06-01' AND orderdate <= '2004-06-30')



Checking For NULL Values
When A Record Does Not Have A Value It Is Considered Empty
NULL

Is The term used to represent a missing/empty value.

A Null value is different from a zero value or a field the contains spaces.

Is it okay to have a NULL Value.
Be careful with NULL.
Always be defensive.

A Contentious issue

Null is a Contentious issue no matter 
what opinion you have people may disagree.

All Roads Lead To Null

No Matter What do you do with null it will
always be null, subtract,divide,equal,...


IS Keyword
So How Should i use it

Optional or Required?
Future Info?
Rational?

Some Data may be required or optional.

Some info we are getting in the future.

Think of the edge cases.

Technical debt making a decision.
Future offering is better with NULL value.

Be Defensive
Always Check For Nulls When Necessary.

1.Filter Out Nulls


The "IS" operator
Allows you to filter on values that are null, not null,
True or False

2. Clean Up Your Data




NULL Coalescing
2.Clean Up Your Data

Null Value Substitution
Ability To Replace Null Values
To Operate On The Data.

Coalesce

Coalesce Returns the First Non-Null value in a list.


Exercise: Null Value Coalescing

/*
* DB: https://www.db-fiddle.com/f/PnGNcaPYfGoEDvfexzEUA/0
* Question: 
* Assuming a students minimum age for the class is 15, what is the average age of a student?


SELECT AVG(coalesce(age,0))
     from "Student";


/*
* DB: https://www.db-fiddle.com/f/PnGNcaPYfGoEDvfexzEUA/0
* Question: 
* Replace all empty first or last names with a default?
*/


SELECT coalesce(name,'fallback'), coalesce(lastname,'lastname') from "Student";



Valued Logic
Three-Valued Logic
Besides True And False, The Result
Of Logical Expressions Can Also Be Unknown

The SQL NULL Value "Could Be Anything".

Nothing Equals NULL
Not Even Null

Each Null could be different.

That's why we use "IS NULL" To check

If we select with NULL value it is going to give nothing.


Exercise: 3 Valued

/*
* DB: Store
* Table: customers
* Question: adjust the following query to display the null values as "No Address"
*/
SELECT COALESCE(address2, 'No Address')
FROM customers

/*
* DB: Store
* Table: customers
* Question: Fix the following query to apply proper 3VL
*/

SELECT *
FROM customers
WHERE address, null) IS NOT null;

/*
* DB: Store
* Table: customers
* Question: Fix the following query to apply proper 3VL
*/

SELECT coalesce(lastName, 'Empty'), * from customers
where (age IS NULL);




BETWEEN + AND
Shorthant To Match Against A Range Of Values
Select <column>
From <Table>
Where <column> Beetween X AND Y


Exercise: BETWEEN + AND

-- Who between the ages of 30 and 50 has an income less than 50 000?
-- (include 30 and 50 in the results)

/*
* Write your query here
*/
Select * From customers
Where income < 50000 ANd age BETWEEN 30 and 50;

-- What is the average income between the ages of 20 and 50? (Including 20 and 50)
/*
* Write your query here
*/
SELECT avg(income) From customers
Where age BETWEEN 20 and 50;




IN Keyword
Filtering Multiple Values
What If I Want To Find Multiple
Values But Not Write Endless And Statements?

IN Keyword
Check If A Value Matches any Value
In A List Of Values

SELECT * FROM <table>
WHERE <column> In (value1,value2,....)


Exercise: IN Keyword

/*
* DB: Store
* Table: orders
* Question: How many orders were made by customer 7888, 1082, 12808, 9623
*/

SELECT count(orderdate) FROM orders
where customerid in (7888, 1082,12808,9623) ;


/*
* DB: World
* Table: city
* Question: How many cities are in the district of Zuid-Holland, Noord-Brabant and Utrecht?
*/

SELECT count(id) FROM city
where district in ('Zuid-Holland','Noord-Brabant','Utrecht');


LIKE
What If You Don't Know Exactly 
What YOU'RE SEARCHING FOR?

Select first_name From employees
Where first_name LIKE 'M%';

In Order To Use Like You Need To Build Patterns To Match!
% Any numbers of characters
- 1 character

We must cast things to text.
Casting is the act of changing something
to something else.
CAST(salary AS text);
salary::text;

name ILIKE 'M0%';



Exercise: Like Keyword

/*
* DB: Employees
* Table: employees
* Question: Find the age of all employees who's name starts with M.
* Sample output: https://imgur.com/vXs4093
* Use EXTRACT (YEAR FROM AGE(birth_date)) we will learn about this in later parts of the course
*/
SELECT emp_no,first_name, EXTRACT (YEAR FROM AGE(birth_date)) as "age" FROM employees
where first_name ILIKE 'M%';



/*
* DB: Employees
* Table: employees
* Question: How many people's name start with A and end with R?
* Expected output: 1846
*/

SELECT count(first_name) From employees
where first_name ilike 'a%r';

                                                  
/*
* DB: Store
* Table: customers
* Question: How many people's zipcode have a 2 in it?.
* Expected output: 4211 
*/

SELECT count(customerid) from customers
where zip::text ilike '%2%';


/*
* DB: Store
* Table: customers
* Question: How many people's zipcode start with 2 with the 3rd character being a 1.
* Expected output: 109 
*/

select count(customerid) FROM customers
where zip::text like '2_1%'

/*
* DB: Store
* Table: customers
* Question: Which states have phone numbers starting with 302?
* Replace null values with "No State"                                                  
* Expected output: https://imgur.com/AVe6G4c
*/

SELECT COALESCE(state,'No State') as "State" from customers
where phone::text like '302%'


Dates And Timezones
DATES ARE HARD

Makes it hard with standards.
Dates are because we are living in different timezones.
We pick a point in the world as a central point.
Greenwich.

Sir Sanford Fleming.

What is UTC Universal Cordinate Time.

We have to use UTC.


Setting Up Timezones
You want to align to timezones.
ALTER USER postgres SET timezone='UTC';
You individually set your timezone.
Postgres set everything in UTC dates.



How Do We Format Date And Time?
What does it looks like

How do dates look?
Postgresql uses ISO-8601
We want to following so many standards as possible.

This is the ISO-8601 standard below.

YYYY-MM-DDTHH:MM:SS

What Is A Format?

A Format Is A Way Of Representing A Date And Time



Timestamps
A Timestamp is a date with time and timezone info.

Select now() 
Gets back a ISO-8601 timestamp.

TIMESTAMP WITHOUT TIME ZONE
TIMESTAMP WITH TIME ZONE


Date Functions
SELECT NOW()::date;
SELECT CURRENT_DATE;

Format
SELECT TO_CHAR(CURRENT_DATE, 'dd/mm/yyyy');


Date Difference And Casting
Select now() - '1800/01/01'

Difference
Subtracting dates returns the difference
in days

Select date '1800/01/01'

Converts A Date To A Date Format For Postgres



Age Calculation
Select AGE(date '1800-01-01')


Extracting Information

Select AGE(date '1992/11/13' , date '1800-01-01')
Select EXTRACT (MONTH FROM date '1992/11/13') AS MONTH

Select DATE_TRUNC('year',date '1992/11/13');

Select DATE_TRUNC('day', date '1992/11/13');



Intervals

SELECT *
FROM orders
Where purchaseDate <= now() - interval '30 days'

Interval allows us to write queries in a way that mirrors
language.

It can store and manipulate a period of time in years,month,days,minutes,
seconds, ETC

It can store and manipulate a period of time in years months,days,hours,minutes,
seconds, ETC.



Exercise: Date and TimeStamps
/*
* DB: Employees
* Table: employees
* Question: Get me all the employees above 60, use the appropriate date functions
*/

Select AGE(birth_date), *From employees
WHERE(EXTRACT(YEAr From AGE(birth_date)))> 60;


/*
* DB: Employees
* Table: employees
* Question: How many employees where hired in February?
*/

Select count(emp_no) FROM employees
WHERE EXTRACT(Month From hire_date) = 2;

/*
* DB: Employees
* Table: employees
* Question: How many employees were born in november?
*/

SELECT count(emp_no) FROM employees
Where EXTRACT (month from birth_date) = 11;

/*
* DB: Employees
* Table: employees
* Question: Who is the oldest employee? (Use the analytical function MAX)
*/

SELECT  max(AGE(birth_date)) FROM employees;


/*
* DB: Store
* Table: orders
* Question: How many orders were made in January 2004?
*/

SELECT count(orderid) FROM orders
WHERE date_trunc('month', orderdate) = date '2004-01-01';


DISTINCT
Remove Duplicates.

Distinct Keyword
Distinct Clause keeps one row
for each group of duplicates.

SELECT 
   Distinct <col1>, <col2>
FROM
   <table>




Exercise: Distinct Keyword

/*
* DB: Employees
* Table: titles
* Question: What unique titles do we have?
*/

SELECT distinct title FROM titles;

/*
* DB: Employees
* Table: employees
* Question: How many unique birth dates are there?
*/

SELECT count(DISTINCT birth_date) FROM employees;


/*
* DB: World
* Table: country
* Question: Can I get a list of distinct life expectancy ages
* Make sure there are no nulls
*/


SELECT distinct lifeexpectancy FROM country
where lifeexpectancy is not Null
order by lifeexpectancy;



Sorting Data
ORDER BY
Select * FROM CUSTOMERS
ORDER BY <column> [ASC/DESC]

You must exliplicity for every column.


Exercise Sorting Data
/*
* DB: Employees
* Table: employees
* Question: Sort employees by first name ascending and last name descending
*/
Select * FROM employees
order by first_name ASC, last_name DESC;

/*
* DB: Employees
* Table: employees
* Question: Sort employees by age
*/
Select * From employees
order by birth_date;


/*
* DB: Employees
* Table: employees
* Question: Sort employees who's name starts with a "k" by hire_date
*/

SELECT * from employees
Where first_name ilike 'k%'
order by hire_date;


Multi Table SELECT
We have been answering simple questions.
The queries we will write combine multiple tables.
Want to show the information.
Multi-Table Select.

We are linking to a foreign key.

What if we could use the where clause to
filter against it?

A Join combines columns from one table with those of another.

Joins

Take A column From One Table That Can Map To The Column of Another Table

Most Common Approach?
Link Primary Key To Foreign Key





Inner Join
If you have a columns that links the column from
table A to table B you can use an inner join.

Select a.emp_no,
	   CONCAT(a.first_name, a.last_name) as "name", b.salary

FROM employees as a, salaries as b
WHERE a.emp_no = b.emp_no;

INNER JOIN keywords is trying to select things from each side.

Difference?

The Inner Join Syntax is generally considered a best practice
it's more readable than using the where syntax
it shows you what's being joined
it's great


Self Join
Joining A Table To Itself

This usually can be done when
a table has a foreign key
references its primary key

What if we want to see the supervisors name?
Self-join is like inner-join but to join itself.



Outer Join
What if i also need the rows that don't match.
Outer joins add the data that don't have a match.

Left Join Add the Data That don't have a match from table A.

Left-Outer Join

SELECT *
FROM table A > AS a
LEFT [OUTER] JOIN <table B> AS b
ON a.id = b.id

Left Outer Join
Any Value That Does Not Match Is Made To Be Null

Problem?
You Want To Know How Many Employees Aren't Managers?

Select Count(e.emp_no)
FROM employees AS emp
LEFT JOIN dept_manager AS dep ON emp.emp_no = dep.emp_no
Where dep.emp_no IS NULL

You Want to know every salary
Raise and also know when ones
were a promotion


Less Common Joins
There are more join techniques
they just aren't used that often

CROSS JOIN
Create A Combination Of Every Row


FULL OUTER JOIN
RETURN RESULTS FROM BOTH
WHETHER THEY MATCH OR NOT


Inner-Join Exercises

/*
* DB: Store
* Table: orders
* Question: Get all orders from customers who live in Ohio (OH), New York (NY) or Oregon (OR) state
* ordered by orderid
*/

SELECT c.firstname, c.lastname, o.orderid FROM orders as o INNER JOIN customers AS c
ON o.customerid = c.customerid
WHERE c.state in ('NY','OH','OR')
order by o.orderid; 


/*
* DB: Store
* Table: products
* Question: Show me the inventory for each product
*/
SELECT p.prod_id, i.quan_in_stock
from products as p
inner join inventory as i on p.prod_id = i.prod_id;


/*
* DB: Employees
* Table: employees
* Question: Show me for each employee which department they work in
*/

Select e.first_name, d.dept_name from employees as "e"
inner join dept_emp as "de" on de.emp_no = e.emp_no
inner join departments as "d" on d.dept_no = de.dept_no; 


USING Keyword
On case comparing foreign key to primary key.
using(emp_no) for example.


