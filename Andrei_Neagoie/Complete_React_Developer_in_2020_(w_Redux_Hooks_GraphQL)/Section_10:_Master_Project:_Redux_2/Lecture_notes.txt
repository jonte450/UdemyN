Directory State Into Redux
Much of the pattern will 90% of building a pattern.
The approach to breaking into one thing at a time.
We have building new features with React-flow.
We want to practice this pattern.
On our homepage we have the directory.
We have some states so we can move into the store.

We can modify the shop state.
Technically held.
So we want to share into the redux-state.

We create an new folder called directory.

We are making a directory.reducer.js

const INTIAL_STATE = {
	Directory information.
}

const directoryReducer = (state = INITIAL_STATE, action ) => {
	swith(action.type){
	 default:
	 	return state;
	}
}

export default directoryReducer;

Debate if it is worth it.
Overkill to move outside.
It makes it easier to test.
Make our directory Component more reusable.



import { combineReducers } from 'redux';
import { persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';

import directoryReducer from './cart/cart.reducer';
import userReducer from './user/user.reducer';
import cartReducer from './cart/cart.reducer';

const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['cart']
};

const rootReducer = combineReducers({
  user: userReducer,
  cart: cartReducer
  directory: directoryReducer;
});

export default persistReducer(persistConfig, rootReducer);

import React from 'react';
import { connect } from 'react-redux';
import MenuItem from '../menu-item/menu-item.component';
import { createStructuredSelector } from 'reselect';
import { selectDirectorySections } from '../../redux/directory/directory.selectors';
import './directory.styles.scss';

const Directory = ({sections }) => (
      <div className='directory-menu'>
        {this.state.sections.map(({ id, ...otherSectionProps }) => (
          <MenuItem key={id} {...otherSectionProps} />
        ))}
      </div>
    );

const mapStateToProps = createStructuredSelector({
	sections: selectDirectorySections
})

export default Directory;

And we make a directory.selectors.js file.

import { createSelector } from 'reselect';

const selectDirectory = state => state.directory;

export const selectDirectory = createSelector(
 [selectDirectory],
 directory => directory.sections.
);

export default connect(mapStateToProps)(Directory);

Collection State Into Redux
Moving the shopage.data.js outside to Redux.
Usually it is stored in a database.
Pull out information to your shop.component.

Add a shop follder to redux.

In shop.reducer.js

import SHOP_DATA from './shop.data';

const INITIAL_STATE = {
	collections: SHOP_DATA
};

const shopReducer = (state = INITIAL_STATE, action) =>{
	switch (action.type) {
		default: 
			return state;
	}
}

export default shopReducer;

And in the root-reducer.js we import this state.

import { combineReducers } from 'redux';
import { persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';

import directoryReducer from './cart/cart.reducer';
import shopReducer from './shop/shop.reducer';
import userReducer from './user/user.reducer';
import cartReducer from './cart/cart.reducer';

const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['cart']
};

const rootReducer = combineReducers({
  user: userReducer,
  cart: cartReducer,
  directory: directoryReducer,
  shop: shopReducer
});

export default persistReducer(persistConfig, rootReducer);

And in our shop.component.jsx file we have.

import React from 'react';

import SHOP_DATA from './shop.data.js';
import selectShopItems from '../../redux/shop/shop.selectors';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';


import CollectionPreview from '../../components/collection-preview/collection-preview';

const ShopPage  =({ collections }) => (

      <div className='shop-page'>
        {collections.map(({ id, ...otherCollectionProps }) => (
          <CollectionPreview key={id} {...otherCollectionProps} />
        ))}
      </div>
    );

const mapStateToProps = createStructuredSelector ({
	collections: selectCollections
})

export default connect(mapStateToProps)(ShopPage);

And in our shop.selectors.js file

import { createSelector } from 'reselect';

const selectShop = state => state.shop;

export const selectCollections = createSelector(
	[selectShop],
	shop => shop.collections
)


Collection Overview Component
A second to say i think it.
Almost 80-90% follows same pattern we have done.
But the foundations is all it is to react-redux.
It is pretty the majority to build websites in react-redux.
We are going to look on other ways to build upon.
So what we want to build next is to display the items.
We need to render nested routes.
We can actually put Routes.

Inside our component we make a collection-overview.

And in collection-overview.component.jsx

import React from 'react';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { CollectionPreview } from '../collection-preview/collection-preview';
import './collections-overview.styles.scss';

const CollectionOverview = ({ collections }) => (
<div className='collections-overview'>
{collections.map(({ id, ...otherCollectionProps }) => (
<CollectionPreview key={id} {...otherCollectionProps} />
))}
</div>
)

const mapStateToProps = createStructuredSelector({ 
	collections: selectCollections
});


export connect(mapStateToProps)(CollectionOverview)

