Section Overview
We have built our to have sign-in and sign-up functionality.
Make our React more scalable.
New terms take away.
Our app becomes more and more har.
The key to become a React developer is to understand where to put the state.
Stick with us.
State management 

Redux Introduction
React states.
Sign-in as admin.
Update to the component.
Have nice views.
As our React becomes bigger more and more states.
Confusing how to get.
We need some state management.
What if we removed all these components.
We keep the states in one massive object called store.
Pass down the state.
No one of the components dosen't need any states anymore.
Redux got it's inspiration from databases.

Redux Concepts
Why do we want to use Redux.
Redux is a library we wanna use.
Redux solves the problem with the React App get really complicated.

Useful for storing data.
-Good for managing large state
-Useful for sharing data between components.
-Predictable state management using the 3 priniciples.

1.Single source of truth
2.State is read only
3.Changes using pure functions

Action -> Root Reducer -> Store -> DOM changes.

User click a button and reducer functions and the store get's updated.
If you have tons of actions happens.
The more and more actions we can be really complicated.
Goes through just one reducer and updates the store.
Funnel it down to make it more predictable.

Uses Flux-Pattern
-Action
-Dispatcher
-Store
-View

Crazieness about the actions.
We wanna archtecht the app to make it sense.
Is pretty much like redux === this.state.
We can still keep a state in the component.

Redux In Our Application

We are about to cover Redux.
Extensively.
How apps are build today.
Before we start to write Redux code.
Trying to understand the App component.
In this explain the problem comes from.
Stored in our database in our top-level component.
We had to drilling props to the other components and that's is a bad habit.
Further they goes down it becomes more nested.
What if we had some cart-component being nested and used in two places.
It makes the code way less reusable.
The local state may reused on another component.
We want one state to be single source of truth.
Redux is the single state of truth.
Components fires actions.
We set a single set of state.
Somewhere the single states can get accessed to.
Pass states to the props.
All of our states is placed in one state.
We still get unidirectional data-flow.

Redux Actions And Reducers
It is gotta be a lot of code we are unfamiliar with.
Look at the reducers.
Home-reducers hold properties that are related to the home-reducers.
They all compose the root-reducers.
We are using actions.
Actions is a type of object.
Whenever we wanna update the values.
If we wanna update the actions.
We are doing things with actions that have a payload what we want it to be.
Go into the reducers.
Go to see if the payload is applicable.
Reducers is going to check against the type.
Reducers is going pass it to the components.
Every reducer is a action.
With the function it will return an new object.
We are using a switch-statement.
If none of the currentState dosen't match we just return the currentState.

Setting Up Redux 1
We are going to setup our code.
We are going to write lot of code.
We have some action that propagetes some changes to the store.
It can hit something in the middle called middleware.
Redux logger middleware.
logger shows every state of the states.
Redux can be used in multiple frameworks not just React.
yarn add redux redux-logger react-redux
We will import a provider that we will wrap around the whole function.
The Provider is the parent of all the application.
It allows us to get access everything to the store.

 
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import './index.css';
import App from './App';

ReactDOM.render(
<Provider>
  <BrowserRouter>
    <App />
  </BrowserRouter>
  </Provider>,
  document.getElementById('root')
);

Make a new Folder redux
Create an file Root-reducer.js
Combines all of our states togheter.

All of the reducers we are going to write.

New folder called users.

users.reducers.jsx

const INITIAL_STATE = {
	currentUser: null
}

const userReducer = (state = INITIAL_STATE, action) => {
	switch(action.type) {
	case 'SET_CURRENT_USER':
		return {
		   ...state,
		   currentUser: action.payload
		}

	default:
		return state;

	}
}

export default userReducer;

in the root-reducer.js

import { combineReducers } from 'redux';
import userReducer from './user/user.reducer';

export default combineReducers({
	user: userReducer
});

Setting Up Redux 2
Now that we have our Reducers.
We need to create the store.
We create a new file called store.js
We are going to add middleware to our store.
Catches the action.

import { createStore, applyMiddleware } from 'redux';
import logger from 'redux-logger';

import rootReducer from './root-reducer';

const middlewares = [logger];

const store = createStore(rootReducer, applyMiddlewares(...middlewares))

export default store;

App.jsx
We import in the store to our App.js file.
And give as a input to the Provider component.

import store from './redux/store';
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import './index.css';
import App from './App';

ReactDOM.render(
<Provider store={store}>
  <BrowserRouter>
    <App />
  </BrowserRouter>
  </Provider>,
  document.getElementById('root')
);

Now we can write some actions.
We now have to write some actions.

We create user.actions.js

export const setCurrentUser = user => ({
	type: 'SET_CURRENT_USER',
	payload: user
})

We always make sure we align and give a payload.
With this we have created our user action.

connect() and mapStateToProps
We need to bring in Redux to the Header component.
Connect is an higher-order component.


import React from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';

import { auth } from '../../firebase/firebase.utils';

import { ReactComponent as Logo } from '../../assets/crown.svg';

import './header.styles.scss';

const Header = ({ currentUser }) => (
  <div className='header'>
    <Link className='logo-container' to='/'>
      <Logo className='logo' />
    </Link>
    <div className='options'>
      <Link className='option' to='/shop'>
        SHOP
      </Link>
      <Link className='option' to='/shop'>
        CONTACT
      </Link>
      {currentUser ? (
        <div className='option' onClick={() => auth.signOut()}>
          SIGN OUT
        </div>
      ) : (
        <Link className='option' to='/signin'>
          SIGN IN
        </Link>
      )}
    </div>
  </div>
);

const mapStateToProps = state => ({
   	currentUser: state.user.currentUser,
})

export default connect(mapStateToProps)(Header);

mapDispatchToProps
Now that we have made the Header component recieve from the Redux-Store we have to update the App component.
We remove the constructor and the setState.
And we connect the App with the store.
And we uses mapDispatchToProps to our connect in the App.js.
Now our components are isolated this time.

import React from 'react';
import { Switch, Route } from 'react-router-dom';
import { connect } from 'react-redux';

import './App.css';

import HomePage from './pages/homepage/homepage.component';
import ShopPage from './pages/shop/shop.component';
import SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';
import Header from './components/header/header.component';
import { auth, createUserProfileDocument } from './firebase/firebase.utils';
import { setCurrentUser } from './redux/user/user.actions';

class App extends React.Component {
	const {setCurrentUser} = this.props;

  unsubscribeFromAuth = null;

  componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {
      if (userAuth) {
        const userRef = await createUserProfileDocument(userAuth);

        userRef.onSnapshot(snapShot => {
         setCurrentUser({
              id: snapShot.id,
              ...snapShot.data()
            }
          });
        });
      }

      setCurrentUser(userAuth);
    });
  }

  componentWillUnmount() {
    this.unsubscribeFromAuth();
  }

  render() {
    return (
      <div>
        <Header currentUser={this.state.currentUser} />
        <Switch>
          <Route exact path='/' component={HomePage} />
          <Route path='/shop' component={ShopPage} />
          <Route path='/signin' component={SignInAndSignUpPage} />
        </Switch>
      </div>
    );
  }
}

const mapDispatchToProps = dispatch =>  ({
	setCurrentUser: user => dispatch(setCurrentUser(user))
})

export default connect(null, mapDispatchToProps )(App);

User Redirect and User Action Type

If a user is sign in right they can mess with sign-in page.
And that we don't it to do.
Let's make a small modification.
We use the render-method with an function with ternary expression that redirects the page if the user is a currentUser.

import React from 'react';
import { Switch, Route, Redirect } from 'react-router-dom';
import { connect } from 'react-redux';

import './App.css';

import HomePage from './pages/homepage/homepage.component';
import ShopPage from './pages/shop/shop.component';
import SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';
import Header from './components/header/header.component';
import { auth, createUserProfileDocument } from './firebase/firebase.utils';
import { setCurrentUser } from './redux/user/user.actions';

class App extends React.Component {
	const {setCurrentUser} = this.props;

  unsubscribeFromAuth = null;

  componentDidMount() {
    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {
      if (userAuth) {
        const userRef = await createUserProfileDocument(userAuth);

        userRef.onSnapshot(snapShot => {
         setCurrentUser({
              id: snapShot.id,
              ...snapShot.data()
            }
          });
        });
      }

      setCurrentUser(userAuth);
    });
  }

  componentWillUnmount() {
    this.unsubscribeFromAuth();
  }

  render() {
    return (
      <div>
        <Header currentUser={this.state.currentUser} />
        <Switch>
          <Route exact path='/' component={HomePage} />
          <Route path='/shop' component={ShopPage} />
          <Route exact path='/signin' render={() => this.props.currentUser ? (<Redirect to='/' />) : (<SignInAndSignUpPage />)} />
        </Switch>
      </div>
    );
  }
}

const mapStateToProps = ({ user}) => ({
	currentUser: user.currentUser
});

const mapDispatchToProps = dispatch =>  ({
	setCurrentUser: user => dispatch(setCurrentUser(user))
})

export default connect(null, mapDispatchToProps )(App);

user.types.js

export const UserActionTypes = {
	SET_CURRENT_USER: 'SET_CURRENT_USER'
}

And we don't have any typos error.

Cart Component
Feature is our cart.
Representing of a shopping-bag.
That shows you the current items.
Two components is going to share the same state.

We need to bring in the svg file.
Let's make cart-item-componet.jsx file.

import React from 'react';
import './cart-icon.styles.css';
import { ReactComponet as ShoppingIcon } from '../../assets/shopping-bag.svg';

const CartIcon = () => (
<div className='cart-icon'>
  <ShoppingIcon className='shopping-icon' />
  <span className='item-count'>0</span>
  </div>
)

export default CartIcon;

Let's bring it into the header.component.jsx

import React from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';

import { auth } from '../../firebase/firebase.utils';
import CartIcon from '../cart-icon/cart-icon.component';
import { ReactComponent as Logo } from '../../assets/crown.svg';

import './header.styles.scss';

const Header = ({ currentUser }) => (
  <div className='header'>
    <Link className='logo-container' to='/'>
      <Logo className='logo' />
    </Link>
    <div className='options'>
      <Link className='option' to='/shop'>
        SHOP
      </Link>
      <Link className='option' to='/shop'>
        CONTACT
      </Link>
      {currentUser ? (
        <div className='option' onClick={() => auth.signOut()}>
          SIGN OUT
        </div>
      ) : (
        <Link className='option' to='/signin'>
          SIGN IN
        </Link>
      )}
      <CartIcon />
    </div>
  </div>
);

const mapStateToProps = state => ({
   	currentUser: state.user.currentUser,
})

export default connect(mapStateToProps)(Header);

Card Dropdown Component
We have a scrollable section.
Let's start building the component.

Let's create cart-dropdown.component.jsx

import React from 'react';
import CustomButton from '../custom-button/custom-button.component';
import './cart-dropdown.styles.scss';

const CartDropdown = () => (
<div className='cart-dropdown'>
<div className='cart-items' />
<CustomButton> GO TO CHECKOUT </CustomButton>
</div>
)

export default CartDropdown;

And now we have to bring in the CartDropdown to our Header component.

import React from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';

import { auth } from '../../firebase/firebase.utils';
import CartIcon from '../cart-icon/cart-icon.component';
import CartDropdown from '../cart-dropdown/cart-dropdown.component';
import { ReactComponent as Logo } from '../../assets/crown.svg';

import './header.styles.scss';

const Header = ({ currentUser }) => (
  <div className='header'>
    <Link className='logo-container' to='/'>
      <Logo className='logo' />
    </Link>
    <div className='options'>
      <Link className='option' to='/shop'>
        SHOP
      </Link>
      <Link className='option' to='/shop'>
        CONTACT
      </Link>
      {currentUser ? (
        <div className='option' onClick={() => auth.signOut()}>
          SIGN OUT
        </div>
      ) : (
        <Link className='option' to='/signin'>
          SIGN IN
        </Link>
      )}
      <CartIcon />
    </div>
    <CartDropdown />
  </div>
);

const mapStateToProps = state => ({
   	currentUser: state.user.currentUser,
})

export default connect(mapStateToProps)(Header);

We are going to hide the CartDropdown when some no one is clicking on it.

Implementing Redux In Cart
We have to trigger the cart-drop-down.
We could add on click value.
Move it outside the Header component.
And we import the cart.types.js

import CartActionTypes from './cart.types'

cart.reducer.js

const INITIAL_STATE = {
	hidden: true
};

const cartReducer = (state = INITIAL_STATE, action) => {
	switch(action.type) {
	case CartActionTypes.TOOGLE_CART_HIDDEN:
	 return {
	  ...state,
	  hidden: !state.hidden
	 }
	 default:
	 	return state;
	}
}

export default cartReducer;

So now let's go to cart.types.js

export default const CartActionTypes = {
	TOOGLE_CART_HIDDEN: 'TOOGLE_CART_HIDDEN'
}

And we go to the cart.actions.js.

import CartActionTypes from './cart.types';

export const toggleCartHidden = () => ({
	type: CartActionTypes.TOOGLE_CART_HIDDEN
});

And we go into the cart-item-componet.jsx and bring in cartActions.
And we need mapDispatchToProps and dispatch the toggleCartHidden and dispatch it.


import React from 'react';
import { connect } from 'react-redux';

import { toggleCartHidden } from '../../redux/cart/cart.actions';

import { ReactComponent as ShoppingIcon } from '../../assets/shopping-bag.svg';

import './cart-icon.styles.scss';

const CartIcon = ({ toggleCartHidden }) => (
  <div className='cart-icon' onClick={toggleCartHidden}>
    <ShoppingIcon className='shopping-icon' />
    <span className='item-count'>0</span>
  </div>
);

const mapDispatchToProps = dispatch => ({
  toggleCartHidden: () => dispatch(toggleCartHidden())
});

export default connect(
  null,
  mapDispatchToProps
)(CartIcon);

And now we have to hide and show the cart-dropdown.jsx component let's go to the header.

And what we need to destruct the hidden values.
I want you to give this value {user: {currentUser} ,cart: {hidden}}

And we can hidden the value with ? a tenary operator.

import React from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';

import { auth } from '../../firebase/firebase.utils';
import CartIcon from '../cart-icon/cart-icon.component';
import CartDropdown from '../cart-dropdown/cart-dropdown.component';

import { ReactComponent as Logo } from '../../assets/crown.svg';

import './header.styles.scss';

const Header = ({ currentUser, hidden }) => (
  <div className='header'>
    <Link className='logo-container' to='/'>
      <Logo className='logo' />
    </Link>
    <div className='options'>
      <Link className='option' to='/shop'>
        SHOP
      </Link>
      <Link className='option' to='/shop'>
        CONTACT
      </Link>
      {currentUser ? (
        <div className='option' onClick={() => auth.signOut()}>
          SIGN OUT
        </div>
      ) : (
        <Link className='option' to='/signin'>
          SIGN IN
        </Link>
      )}
      <CartIcon />
    </div>
    {hidden ? null : <CartDropdown />}
  </div>
);

const mapStateToProps = ({ user: { currentUser }, cart: { hidden } }) => ({
  currentUser,
  hidden
});

export default connect(mapStateToProps)(Header);

Add To Cart Styling

First we know that each item has a hover effect.
Almost the same data is being displayed.
Thinking how we can reuse the items.
How to convert the items to having the hover effect.

import React from 'react';

import './custom-buttom.styles.scss';

const CustomButton = ({ children, isGoogleSignIn, inverted ,...otherProps }) => (
  <button
    className={`${inverted ? 'inverted' : ''} custom-button`}
    {...otherProps}
  >
    {children}
  </button>
);

export default CustomButton;

And in the custombutton we want to add in

&.inverted {
 background-color: white;
 color: black;
 border: 1px solid black;
}

And if we hover we want it to have just the same color.

&:hover {
	background-color: black;
	color: white;
	border: none;
}

And now we add the CustomButton to the collectionItem.component

import React from 'react';
import CustomButton from '../custom-button/custom-button.component';
import './collection-item.styles.scss';

const CollectionItem = ({ id, name, price, imageUrl }) => (
  <div className='collection-item'>
    <div
      className='image'
      style={{
        backgroundImage: `url(${imageUrl})`
      }}
    />
    <div className='collection-footer'>
      <span className='name'>{name}</span>
      <span className='price'>{price}</span>
    </div>
    <CustomButton inverted>Add to cart </CustomButton>
  </div>
);

export default CollectionItem;

.custom-button {
	width: 80%;
	opacity: 0.7;
	position: absolute
}

Cart Item Reducer
We have to the properties to our reducer.
We set a cartItems to a empty array.
Actually start to add items.
So we going to start with a new case.
Now we want the cartItem and the action.payload.
Getting the item payload.

import CartActionTypes from './cart.types';

const INITIAL_STATE = {
  hidden: true,
  cartItems: []
};

const cartReducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case CartActionTypes.TOGGLE_CART_HIDDEN:
      return {
        ...state,
        hidden: !state.hidden
      };
    case CartActionTypes.ADD_ITEM:
      return {
        ...state,
        cartItems: [...state.cartItems, action.payload]
      };
    default:
      return state;
  }
};

export default cartReducer;

We have to add actions to the cart.types.js


const CartActionTypes = {
  TOGGLE_CART_HIDDEN: 'TOGGLE_CART_HIDDEN',
  ADD_ITEM: 'ADD_ITEM'
};

export default CartActionTypes;

We want to make a new action called addItem.
We want to return the payload as item. 

import CartActionTypes from './cart.types';

export const toggleCartHidden = () => ({
  type: CartActionTypes.TOGGLE_CART_HIDDEN
});

export const addItem = item => ({
  type: CartActionTypes.ADD_ITEM,
  payload: item
});

We want to import connect from react-redux.
We want to import addItem.
And we call mapDispatchToProps to add items.
We are not taking any states to connect.
We want to pass the whole item.
Destructring the item properties.
This is very simple flow.
We can see that the Redux is working now.

import React from 'react';
import { connect } from 'react-redux';

import CustomButton from '../custom-button/custom-button.component';
import { addItem } from '../../redux/cart/cart.actions';

import './collection-item.styles.scss';

const CollectionItem = ({ item, addItem }) => {
  const { name, price, imageUrl } = item;

  return (
    <div className='collection-item'>
      <div
        className='image'
        style={{
          backgroundImage: `url(${imageUrl})`
        }}
      />
      <div className='collection-footer'>
        <span className='name'>{name}</span>
        <span className='price'>{price}</span>
      </div>
      <CustomButton onClick={() => addItem(item)} inverted>
        Add to cart
      </CustomButton>
    </div>
  );
};

const mapDispatchToProps = dispatch => ({
  addItem: item => dispatch(addItem(item))
});

export default connect(
  null,
  mapDispatchToProps
)(CollectionItem);

Adding Multiple Items To Cart
We are now going to start grouping the cart-items.
We want to add a quantity property.
We are going to write a utility function for this.
Whenever we make a update we want to return a new object.

We create a new file named cart.utils.js
First create function that takes all the already cart-items.
And the cartItem we want to add.
We check the cart-item id.

If the cartItem exists we want to add the quantatity: cartItem.quantatity + 1.
Else we create a object with the cart.item.quantity.

export const addItemToCart = (cartItems, cartItemToAdd) => {
  const existingCartItem = cartItems.find(
    cartItem => cartItem.id === cartItemToAdd.id
  );

  if (existingCartItem) {
    return cartItems.map(cartItem =>
      cartItem.id === cartItemToAdd.id
        ? { ...cartItem, quantity: cartItem.quantity + 1 }
        : cartItem
    );
  }

  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];
};


And now back to the cart.reducer.js.
And replace the cartItems.


import CartActionTypes from './cart.types';
import { addItemToCart } from './cart.utils';

const INITIAL_STATE = {
  hidden: true,
  cartItems: []
};

const cartReducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case CartActionTypes.TOGGLE_CART_HIDDEN:
      return {
        ...state,
        hidden: !state.hidden
      };
    case CartActionTypes.ADD_ITEM:
      return {
        ...state,
        cartItems: addItemToCart(state.cartItems, action.payload)
      };
    default:
      return state;
  }
};

export default cartReducer;

Cart Item Component
In our collections items we get quantity.
So what are we gonna do we make a cart-item component.
We are going destruct somethings we need.
We are going to return the div
So inside the cartItem component we are gonna display the name.
And  we export.
And we also need the quantity.

import React from 'react';

import './cart-item.styles.scss';

const CartItem = ({ item: { imageUrl, price, name, quantity } }) => (
  <div className='cart-item'>
    <img src={imageUrl} alt='item' />
    <div className='item-details'>
      <span className='name'>{name}</span>
      <span className='price'>
        {quantity} x ${price}
      </span>
    </div>
  </div>
);

export default CartItem;

So next we are gonna to import the cart-item to the cart-dropdown.component.
We are going to use connect from the react-redux.
We re going to destruct the cartItems.
So we map out the cart-items.

import React from 'react';
import { connect } from 'react-redux';

import CustomButton from '../custom-button/custom-button.component';
import CartItem from '../cart-item/cart-item.component';

import './cart-dropdown.styles.scss';

const CartDropdown = ({ cartItems }) => (
  <div className='cart-dropdown'>
    <div className='cart-items'>
      {cartItems.map(cartItem => (
        <CartItem key={cartItem.id} item={cartItem} />
      ))}
    </div>
    <CustomButton>GO TO CHECKOUT</CustomButton>
  </div>
);

const mapStateToProps = ({ cart: { cartItems } }) => ({
  cartItems
});

export default connect(mapStateToProps)(CartDropdown);
So now we have them displayed in the cart-drop down.

Selectors In Redux

Displaying the numbers of items in the cart.
So we are going to use reduce to count how many total cartItems we have.
And this is called a selector.
We are just taking some small states.
Whenever the reducer updates.
mapStateToProps are being called all the time and the component will be rerendered.

Objects are not the same.
Objects are a brand new object.
We don't want to be rerender the state.
We want to cache the values.
Called memozization.
Using a library called reselect.

import React from 'react';
import { connect } from 'react-redux';

import { toggleCartHidden } from '../../redux/cart/cart.actions';

import { ReactComponent as ShoppingIcon } from '../../assets/shopping-bag.svg';

import './cart-icon.styles.scss';

const CartIcon = ({ toggleCartHidden, itemCount }) => (
  <div className='cart-icon' onClick={toggleCartHidden}>
    <ShoppingIcon className='shopping-icon' />
    <span className='item-count'>{itemCount}</span>
  </div>
);

const mapDispatchToProps = dispatch => ({
  toggleCartHidden: () => dispatch(toggleCartHidden())
});

const mapStateToProps = ({ cart: { cartItem } }) => ({
	itemCount: cartItems.reduce((accumulatedQuantity, cartItem) => accumulatedQuantity + cartItem.quantity, 0)
})
 
export default connect(
  null,
  mapDispatchToProps
)(CartIcon);

Reselect Library
We have to switch up the folder structure a bit.
We create a new file called cart.selector.js.
We import createSelector from reselect.
There are two types of selectors we can write.

-input
All the input-selectors is a function takes its naming structure of select.
For example it returns a slice of the input.

const selectCart = state => state.cart;

-output
 
createSelector takes two inputs.

The first argument is a array with input-selectors.
The second is a function that will return a value.

selectCartItemsCount.

And we make this also for count cart items.

import { createSelector } from 'reselect';

const selectCart = state => state.cart;

export const selectCartItems = createSelector(
  [selectCart],
  cart => cart.cartItems
);

export const selectCartItemsCount = createSelector(
  [selectCartItems],
  cartItems =>
    cartItems.reduce(
      (accumalatedQuantity, cartItem) =>
        accumalatedQuantity + cartItem.quantity,
      0
    )

We put the selectCart into selectCartItems and into selectCartItemsCount.
Now we have it memozized. 

User Selectors
Now we have the cart-selector let's us convert the users-selector.
You can also input the arrays as arguments.

We are creating a user.selector.js.

import {createSelector} from 'reselect';

const selectUser = state => state.user;

const selectCart = state => state.cart;

export const selectorCurrentUser = createSelector(
[selectUser, selectCart],
(user,cart) => user.currentUser

)

And in the cart.selector.js we 

import { createSelector } from 'reselect';

const selectCart = state => state.cart;

export const selectCartItems = createSelector(
  [selectCart],
  cart => cart.cartItems
);

export const selectCartHidden = createSelector(
[selectCart],
cart => cart.hidden
)

export const selectCartItemsCount = createSelector(
  [selectCartItems],
  cartItems =>
    cartItems.reduce(
      (accumalatedQuantity, cartItem) =>
        accumalatedQuantity + cartItem.quantity,
      0
    )
);

into the header component we are importing in also
import {createStructuredSelector} from 'reselect';
import {selectCartHidden} from '../../redux/cart/cart.selector';
import {selectorCurrentUser} from '../../redux/user/user.selector';

And we can us mapStateToProps like this below.

const mapStateToProps = createStructuredSelector({
	currentUser: selectorCurrentUser,
	hidden: selectCartHidden
});

We should use createStructuredSelector even is just one selector.
And we use createStructuredSelector in all our other components.

Checkout Page
The next thing we must build finish cardDropDown.
We will condionally render the cartItems or else a span with a message 
"Your cart is empty" and the condition is cartItems.length is greater than zero if it is zero it will be counted as false.

Let's talk about type coercion.
JavaScript tries to coerce some types automatically.


import React from 'react';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { withRouter } from 'react-router-dom';

import CustomButton from '../custom-button/custom-button.component';
import CartItem from '../cart-item/cart-item.component';
import { selectCartItems } from '../../redux/cart/cart.selectors';
import { toggleCartHidden } from '../../redux/cart/cart.actions.js';

import './cart-dropdown.styles.scss';

const CartDropdown = ({ cartItems, history, dispatch }) => (
  <div className='cart-dropdown'>
    <div className='cart-items'>
      {cartItems.length ? (
        cartItems.map(cartItem => (
          <CartItem key={cartItem.id} item={cartItem} />
        ))
      ) : (
        <span className='empty-message'>Your cart is empty</span>
      )}
    </div>
    <CustomButton
      onClick={() => {
        history.push('/checkout');
        dispatch(toggleCartHidden());
      }}
    >
      GO TO CHECKOUT
    </CustomButton>
  </div>
);

const mapStateToProps = createStructuredSelector({
  cartItems: selectCartItems
});

export default withRouter(connect(mapStateToProps)(CartDropdown));

And in the cart-dropdown.styles.scss 
  .empty-message {
    font-size: 18px;
    margin: 50px auto;
  }

 Create an new folder and a file called 

 checkout.component.jsx.

import React from 'react';
import './checkout.styles.scss';

const CheckoutPage = () => (
<div>
  CHECKOUT PAGE
  </div>
)

export default CheckoutPage;

We import into the App.js and just check if it works.

Checkout Page 2
Now we wanna finish to build the checkout page.

import React from 'react';
import './checkout.styles.scss';
import {connect} from 'react-redux';
import {createStructuredSelector} from 'reselect';
import {selectCartItems} from '../../redux/cart/cart.selector';

const CheckoutPage = ({cartItems, total}) => (
<div className='checkout-page'>
#And we copy this four time.
<div className='checkout-header'>
<div className='header-block'>
<span></span>
 </div>
</div>{
	cartItems.map(cartItem =>
	cartItem.name 
	)
}
 </div>
 <div> with total.
)


const mapStateToProps = createStructuredSelector({
	cartItems: selectCartItems,
	total: selectCartTotal

})
And write as Description,Quantity,Price,Remove.

export default connect(mapStateToProps)(CheckoutPage);

Extensible Code
Lot of things over and over again.
Making things very simple.
A file is very simple.
Yihua makes components very small.
He is structuring the project so that he making it easy to add feautres.
React and Redux allows to make extensively code.
We are creating declarative.
You want code so simple so anyone can read it.

Dispatch Action Shorthand
We end up displaying the same information to our user.
We can toogle the hidden state.
The dropdown must toogle.

We import in the cart-down.component.jsx

import { toggleCartHidden } from '../../redux/cart/cart.actions.js';

Connect actually drops down mapDispatchToProps if we don't actually give a second argument to connect.

Checkout Item Component
Let's build our checkout component.
We are going to populate the checkout-item.
Go to the checkout-page.

Let's go to the components and create our folder.
Import React from react.
We are gonna declare our checkout-item.
We are going to have our image-container.
Because it are gonna be easier to set the width and height.
Next we are gonna add our span.
And repeat with the span to hold the attributes name, imageUrl, price, quantity.

UTF-8 is a standard for characters.
There are also adtionally symbols of what we can render.
We apply the #hash sign.
We can destruct properties from cartItem. 

checkout-item.jsx

import React from 'react';

import './checkout-item.styles.scss';

const CheckoutItem = ({ cartItem: { name, imageUrl, price, quantity } }) => (
  <div className='checkout-item'>
    <div className='image-container'>
      <img src={imageUrl} alt='item' />
    </div>
    <span className='name'>{name}</span>
    <span className='quantity'>{quantity}</span>
    <span className='price'>{price}</span>
    <div className='remove-button'>&#10005;</div>
  </div>
);

export default CheckoutItem;

Remove Items From Cart
Now we actually need to implement the functionality.
We are ttying to update the cart-item.
We need to dispatch an new action.

In cart.types.js

const CartActionTypes = {
  TOGGLE_CART_HIDDEN: 'TOGGLE_CART_HIDDEN',
  ADD_ITEM: 'ADD_ITEM',
  CLEAR_ITEM_FROM_CART: 'CLEAR_ITEM_FROM_CART'
};

export default CartActionTypes;

And now we go to cart.actions.js and add clearItemFromCart that's get's a property and set the type to the item we want to clear.

import CartActionTypes from './cart.types';

export const toggleCartHidden = () => ({
  type: CartActionTypes.TOGGLE_CART_HIDDEN
});

export const addItem = item => ({
  type: CartActionTypes.ADD_ITEM,
  payload: item
});

export const clearItemFromCart = item => ({
  type: CartActionTypes.CLEAR_ITEM_FROM_CART,
  payload: item
});

And after that we go to the cart.reducer.js file.
And we add a new case to our.
And we use the filter function to remove the id we want to remove.


import CartActionTypes from './cart.types';
import { addItemToCart } from './cart.utils';

const INITIAL_STATE = {
  hidden: true,
  cartItems: []
};

const cartReducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case CartActionTypes.TOGGLE_CART_HIDDEN:
      return {
        ...state,
        hidden: !state.hidden
      };
    case CartActionTypes.ADD_ITEM:
      return {
        ...state,
        cartItems: addItemToCart(state.cartItems, action.payload)
      };
    case CartActionTypes.CLEAR_ITEM_FROM_CART:
      return {
        ...state,
        cartItems: state.cartItems.filter(
          cartItem => cartItem.id !== action.payload.id
        )
      };
    default:
      return state;
  }
};

export default cartReducer;

We now need to bind the checkout-item.component.js

import { connect } from 'react-redux';

import { clearItemFromCart } from '../../redux/cart/cart.actions';

And we add mapDispatchToProps down below

const mapDispatchToProps = dispatch => ({
  clearItem: item => dispatch(clearItemFromCart(item))

});

So now we need to connect with mapDispatchToProps.

export default connect(
  null,
  mapDispatchToProps
)(CheckoutItem);

And after that we add this down below when user press the remove button.
<div className='remove-button' onClick={() => clearItem(cartItem)}>


Remove Items At Checkout
One thing we must think of what is the functionality.
We also need a new cart-action for remove a item.
So we need to add arrows to the checkout-item.components.jsx.
So we use &#10094 and &#10095 for the left right arrows.
Change the quantity.
Cursor:pointer and for the margins 10px.
Let's bind the functionality.

import React from 'react';
import { connect } from 'react-redux';

import {
  clearItemFromCart,
  addItem,
  removeItem
} from '../../redux/cart/cart.actions';

import './checkout-item.styles.scss';

const CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {
  const { name, imageUrl, price, quantity } = cartItem;
  return (
    <div className='checkout-item'>
      <div className='image-container'>
        <img src={imageUrl} alt='item' />
      </div>
      <span className='name'>{name}</span>
      <span className='quantity'>
        <div className='arrow' onClick={() => removeItem(cartItem)}>
          &#10094;
        </div>
        <span className='value'>{quantity}</span>
        <div className='arrow' onClick={() => addItem(cartItem)}>
          &#10095;
        </div>
      </span>
      <span className='price'>{price}</span>
      <div className='remove-button' onClick={() => clearItem(cartItem)}>
        &#10005;
      </div>
    </div>
  );
};

const mapDispatchToProps = dispatch => ({
  clearItem: item => dispatch(clearItemFromCart(item)),
  addItem: item => dispatch(addItem(item)),
  removeItem: item => dispatch(removeItem(item))
});

export default connect(
  null,
  mapDispatchToProps
)(CheckoutItem);

And we go into cart.types.js 
And add the remove items.
 
const CartActionTypes = {
  TOGGLE_CART_HIDDEN: 'TOGGLE_CART_HIDDEN',
  ADD_ITEM: 'ADD_ITEM',
  REMOVE_ITEM: 'REMOVE_ITEM',
  CLEAR_ITEM_FROM_CART: 'CLEAR_ITEM_FROM_CART'
};

export default CartActionTypes;

And after that we go to cart.actions.js.
And we add removeItem.
Payload will still be the items.

import CartActionTypes from './cart.types';

export const toggleCartHidden = () => ({
  type: CartActionTypes.TOGGLE_CART_HIDDEN
});

export const addItem = item => ({
  type: CartActionTypes.ADD_ITEM,
  payload: item
});

export const removeItem = item => ({
  type: CartActionTypes.REMOVE_ITEM,
  payload: item
});

export const clearItemFromCart = item => ({
  type: CartActionTypes.CLEAR_ITEM_FROM_CART,
  payload: item
});

And after that we go to the cart.reducer.js
We are going to make another case.
We are going to return an object.

import CartActionTypes from './cart.types';
import { addItemToCart, removeItemFromCart } from './cart.utils';

const INITIAL_STATE = {
  hidden: true,
  cartItems: []
};

const cartReducer = (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case CartActionTypes.TOGGLE_CART_HIDDEN:
      return {
        ...state,
        hidden: !state.hidden
      };
    case CartActionTypes.ADD_ITEM:
      return {
        ...state,
        cartItems: addItemToCart(state.cartItems, action.payload)
      };
    case CartActionTypes.REMOVE_ITEM:
      return {
        ...state,
        cartItems: removeItemFromCart(state.cartItems, action.payload)
      };
    case CartActionTypes.CLEAR_ITEM_FROM_CART:
      return {
        ...state,
        cartItems: state.cartItems.filter(
          cartItem => cartItem.id !== action.payload.id
        )
      };
    default:
      return state;
  }
};

export default cartReducer;


And in the cart.utils.js
Let's think about if it is a existing the quantity.
So we create removeItemFromCart.
So we use item.find the existing item.

If the existingItem == 1.
So we wanna filter out the cartItem.
So if it is not 1 we wanna decrease the quantity.
And if doesn't exist we just return the cartItem

export const addItemToCart = (cartItems, cartItemToAdd) => {
  const existingCartItem = cartItems.find(
    cartItem => cartItem.id === cartItemToAdd.id
  );

  if (existingCartItem) {
    return cartItems.map(cartItem =>
      cartItem.id === cartItemToAdd.id
        ? { ...cartItem, quantity: cartItem.quantity + 1 }
        : cartItem
    );
  }

  return [...cartItems, { ...cartItemToAdd, quantity: 1 }];
};

export const removeItemFromCart = (cartItems, cartItemToRemove) => {
  const existingCartItem = cartItems.find(
    cartItem => cartItem.id === cartItemToRemove.id
  );

  if (existingCartItem.quantity === 1) {
    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);
  }

  return cartItems.map(cartItem =>
    cartItem.id === cartItemToRemove.id
      ? { ...cartItem, quantity: cartItem.quantity - 1 }
      : cartItem
  );
};

