Testing Introduction
This is an important concept in Programming.
When we started getting into the main world we get thousands lines of codes.
It becomes harder and harder to fix a bug.
Your are starting to create bugs.
Making a giant monster to become hard to debug.

Testing indivual units are tested if they works properly.
More and more important.
I didn't know so much about testing.
You really want to master this skill.

A test is simply a file.
You usally have a test file.
Hundred files of Python.

#pylinting
Check the syntax.
#pyflakes
#PEP 8

Testing is higher level up.
Check even more code.

A library called import unittest.

Unittest

def do_stuff(num):
	return num + 5

We want to import our file we want to test.
Create a class.

import main
import unittest

Have all the things from unittest.TestCase.

class TestMain(unittest.TestCase):
	def test_do_stuff(self):
		test_param = 10
		result = main.do_stuff(test_param)
		self.assertEqual(result, 15)

We are testing value error here now.

	def test_do_stuff(self):
		test_param = 'asodpoas'
		result = main.do_stuff(test_param)
		self.assertEqual(result, ValueError)

TypeError can only concatenate int to str.
Make sure that we catch errors.		

To start the test.

unittest.main()
Wrap our code in a try and except block.

def do_stuff(num):
	try:
	return int(num) + 5
	except ValueError as err:
		return err
T
Becuause we are return the error.
We need to assertTrue

class TestMain(unittest.TestCase):
	def test_do_stuff(self):
		test_param = 10
		result = main.do_stuff(test_param)
		self.assertEqual(isinstance(result, valueError))

unittest.main()
We trying to test function so that gives us an error.
We are trying to break things.

Writing Unit Tests
Continue with the tests and we instead use assertinstance.
There is none right one.

class TestMain(unittest.TestCase):
	def test_do_stuff(self):
		test_param = 10
		result = main.do_stuff(test_param)
		self.assertIsInstance(isinstance(result, valueError))

Readability is important when testing.

def test_do_stuff2(self):
	test_param = None
	result = main.do_Stuff(test_param)
	self.assertEqual(result, ValueError)

It doesn't work because we give it a typeError.

def do_stuff(num=0):
	try:
	return int(num) + 5
	except ValueError as err:
		return err

We are still not checking for the none-type.

def do_stuff(num=0):
	try:
	if num:
	return int(num) + 5
	else:
		return 'please enter number:'
	except ValueError as err:
		return err

def test_do_stuff3(self):
	test_param = None
	result = main.do_Stuff(test_param)
	self.assertEqual(result, 'please enter number')

Went from a simple function.
If we recieved a wrong input like a string or none-type or function failed.
We improved the function.
Allows us to check.

def test_do_stuff4(self):
	test_param = ''
	result = main.do_Stuff(test_param)
	self.assertEqual(result, 'please enter a number')

One thing is because run this file.
These are individual files.

if __name__ == '__main__'
 unittest()

Writing Unit Tests 2
Talk about some neat things you can do with testing.
You have more than one file.
python3 -m unittest
touch test2.py.

Usually you have more than one file.
python3 -m unittest.

With just adding this to multiple files

if __name__ == '__main__'
 unittest()

 You can run more than one test-files.

python3 -m unittest -v 
Gives us more information about the test we run.
You can add Doc-strings '''Hiii ''' you also get the comments to.

def setup(self):
	print('about to test a function')

about to test a function will appear everywhere now.

def tearDown(self):
	print('cleaning up')

Testing something like a database.


Exercise: Testing

import random

Take out the tests and create an new function called 
run_guess.
Remove break and insert true instead.
Extracted out an unit from the function.


def run_guess(guess, answer):
    if  0 < guess < 11:
        if guess == answer:
            print('you are a genius!')
            return True
    else:
        print('hey bozo, I said 1~10')
        return False

if __name__ == '__main__':
    answer = random.randint(1, 10)
    while True:
        try:
            guess = int(input('guess a number 1~10:  '))
            if (run_guess(guess, answer)):
                break
        except ValueError:
            print('please enter a number')
            continue

import unittest 
import script

class TestGame(unittest.TestCase):
	def test_input(self):
		answer = 5
		result = script.run_guess(answer,guess)
		self.assertTrue(result)

	def test_input_wrong_guess(self):
		result = script.run_guess(5,0)
		self.assertFalse(result)

	def test_input_wrong_number(self):
		result = script.run_guess(5,11)
		self.assertFalse(result)

	def test_input_wrong_number(self):
		result = script.run_guess(5,'11')
		self.assertFalse(result)	

if __name__ == '__main__':
	unittest.main

Look at our code and break our functions.
The idea was to work on a small piece of the code.
Hundrends lines of code to test your things.
Trade-off on writing tests or codes.
		