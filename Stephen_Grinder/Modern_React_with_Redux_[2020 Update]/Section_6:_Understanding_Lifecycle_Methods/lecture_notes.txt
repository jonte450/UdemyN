Introducing Lifecycle Methods
There are two ways to initializing states.
We have to talk about something called Lifecycle Methods.
If we implent like these below the function will be called
on some time under the lifecycle.

Render method is a Lifecycle method.


Component Lifecycle
Time
-Constructor and Render
  (content visible on screen)

-componentDidMount
 (Sit and wait for updates...)

-componentDidUpdate
 (Sit and wait until this component is not longer shown)

-componentWillUnmount


Why Lifecycle Methods?

Component Lifecycle
Time
-Constructor and Render
  (content visible on screen)
  (Constructor: Good place to do one-time setup)
  (Render: Avoid doing anything besides returning JSX)

-componentDidMount
 (Sit and wait for updates...)
 (Good place to do data-loading)

-componentDidUpdate
 (Sit and wait until this component is not longer shown)
 (Good place to do more data-loading when state/props change)

-componentWillUnmount
 (Good place to do cleanup (especially for non-React stuff))

 Other lifecycle methods(rarely used)
  -shouldComponentUpdate
  -getDerivedStateFromProps
  -getSnapshotBeforeUpdate




Refactoring Data Loading to Lifecycle Methods

It is better to put componentDidMount() loading than in the
constructor.

import React from 'react';
import ReactDOM from 'react-dom';

class App extends React.Component {
  constructor(props) {
    super(props);

    // THIS IS THE ONLY TIME we do direct assignment
    // to this.state
    this.state = { lat: null, errorMessage: '' };
  }

  componentDidMount() {
    window.navigator.geolocation.getCurrentPosition(
      position => this.setState({ lat: position.coords.latitude }),
      err => this.setState({ errorMessage: err.message })
    );
  }

  // React says we have to define render!!
  render() {
    if (this.state.errorMessage && !this.state.lat) {
      return <div>Error: {this.state.errorMessage}</div>;
    }

    if (!this.state.errorMessage && this.state.lat) {
      return <div>Latitude: {this.state.lat}</div>;
    }

    return <div>Loading!</div>;
  }
}

ReactDOM.render(<App />, document.querySelector('#root'));




Alternate State Initialization

We remove the constructor.
We are running through Babeljs.io.
Babel implemented the constructor function for us.
Babel is going to build the constructor for you.


import React from 'react';
import ReactDOM from 'react-dom';

class App extends React.Component {
  state = { lat: null, errorMessage: '' };

  componentDidMount() {
    window.navigator.geolocation.getCurrentPosition(
      position => this.setState({ lat: position.coords.latitude }),
      err => this.setState({ errorMessage: err.message })
    );
  }

  // React says we have to define render!!
  render() {
    if (this.state.errorMessage && !this.state.lat) {
      return <div>Error: {this.state.errorMessage}</div>;
    }

    if (!this.state.errorMessage && this.state.lat) {
      return <div>Latitude: {this.state.lat}</div>;
    }

    return <div>Loading!</div>;
  }
}

ReactDOM.render(<App />, document.querySelector('#root'));





Passing State as Props

We put the the latitude as props to the SeasonDisplay.


import React from 'react';
import ReactDOM from 'react-dom';
import SeasonDisplay from './SeasonDisplay';

class App extends React.Component {
  state = { lat: null, errorMessage: '' };

  componentDidMount() {
    window.navigator.geolocation.getCurrentPosition(
      position => this.setState({ lat: position.coords.latitude }),
      err => this.setState({ errorMessage: err.message })
    );
  }

  // React says we have to define render!!
  render() {
    if (this.state.errorMessage && !this.state.lat) {
      return <div>Error: {this.state.errorMessage}</div>;
    }

    if (!this.state.errorMessage && this.state.lat) {
      return <SeasonDisplay lat={this.state.lat} />;
    }

    return <div>Loading!</div>;
  }
}

ReactDOM.render(<App />, document.querySelector('#root'));

From the SeasonDisplay Component.

import React from 'react';

const SeasonDisplay = props => {
  console.log(props.lat);

  return <div>Season Display</div>;
};

export default SeasonDisplay;




Determining Season

We put the props in a function called getSeason
And we simplyfy it a little bit.
And we add some ternary expression.


import React from 'react';

const getSeason = (lat, month) => {
  if (month > 2 && month < 9) {
    return lat > 0 ? 'summer' : 'winter';
  } else {
    return lat > 0 ? 'winter' : 'summer';
  }
};

const SeasonDisplay = props => {
  const season = getSeason(props.lat, new Date().getMonth());

  console.log(season);

  return <div>Season Display</div>;
};

export default SeasonDisplay;



Ternary Expressions in JSX

We want ultimately get some text.
We use a ternary expression Burr it is chilly.
Some people will say you should not put a ternary expression in a div-tag.


import React from 'react';

const getSeason = (lat, month) => {
  if (month > 2 && month < 9) {
    return lat > 0 ? 'summer' : 'winter';
  } else {
    return lat > 0 ? 'winter' : 'summer';
  }
};

const SeasonDisplay = (props) => {
  const season = getSeason(props.lat, new Date().getMonth());
  const text =
    season === 'winter' ? 'Burr, it is chilly' : 'Lets hit the beach';

  return (
    <div>
      <h1>{text}</h1>
    </div>
  );
};

export default SeasonDisplay;





Icons Not Loading and CORS errors


In the upcoming lecture, we will be adding some font icons from the Semantic UI library.

There is a CDN bug that some students are hitting where the icons will no longer load and throw a CORS error after changing the browser's location sensors. Another student finally discovered the reason here.

The CDN.js docs add the integrity and crossorigin parameters to your script by default, which is breaking when we change the location sensors.

Change the script to look like this:

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css" />

Stop the server and close your browser (if you miss fully closing the browser the error will persist). Then, restart your server.

If this does not resolve your issue, you can also choose to install the CSS library locally:

npm install semantic-ui-css

Then, import the library into your root index.js component:

import "semantic-ui-css/semantic.min.css";




Showing Icons


Extracting Options to Config Objects


Adding Some Styling


Showing a Loading Spinner


Specifying Default Props


Avoiding Conditionals in Render


Breather and Review


Coding Exercise 4: Class-Based Components


Exercise Solution - Class-Based Components

Coding Exercise 5: Updating Components with State