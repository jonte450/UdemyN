App Outline

-This app is going to look really
 complicated, but at its core it is
 going to be straightforward to build

-Our focus is going to be on React/Redux
 not any complicated backend pieces

Put togheter a backend-server.
Twitch view some videogames videos.
Science Technology watch people build software.
Twitch is a billion technology.

Streamer's Computer -> Video Stream + Stream Key 
->Real Time Messaging Protocol (RTMP) Server -> Viewer's Browser

Web server that knows which
streams are currently
broadcasting

Once they see a stream availaveable.



Mockups in Detail

Wide a variety of pages to see.
Figure out how to handle navigation.
Authentication system using Google Auth.


Index Page
Main landing page show the user
a list.

With Twitch
Every user has one stream/channel
they can stream to

Our App
Every user can create unlimited
channels/streams that they can
stream to

User is not logged in
-User can view a list of all streams/channels
-User can view video for a single stream

User is logged in
-User can create a new stream/channel
-User can edit a stream/channel the have created
-User can delete a stream/channel they have created

Index page will change with some new button like
edit,create,delete.



App Challenges
create a new directory called streams
create-react-app client

-Need to be able to navigate to separate pages in our app
-Need to allow a user to login/logout
-Need to handle forms in Redux
-Need to master CRUD (Create Read Update Destroy) operations in React/Redux
-Errors will likely occur! Need good error handling

We are trying to master CRUD operations.
Every APP can be simplified to a CRUD.



Initial Setup
Pregenerated files.
Setting up a boilerplate.

import React from 'react';
import ReactDOM from 'react-dom';

import App from './components/App';

ReactDOM.render(<App />, document.querySelector('#root'));

App.js

import React from 'react';

const App = () => {
	return <div> App </div>;
};

export default App;




Introducing React Router
npm install --save react-router-dom

react-router: Core navigation lib - we don't install this manually
react-router-dom: Navgation for dom-based apps (we want this!)
react-router-native: Navigate for react-native apps
react-router-redux: Bindings between Redux and React Router
                    (not necessary)

You always react-router-dom when working on the DOM.

npm start

Making two dummy components.


import React from 'react';
import { BrowserRouter, Route } from 'react-router-dom';

const PageOne = () => {
  return <div>PageOne</div>;
};

const PageTwo = () => {
  return (
    <div>
      PageTwo
      <button>Click Me!</button>
    </div>
  );
};

const App = () => {
  return (
    <div>
      <BrowserRouter>
        <div>
          <Route path="/" exact component={PageOne} />
          <Route path="/pagetwo" component={PageTwo} />
        </div>
      </BrowserRouter>
    </div>
  );
};

export default App;



How React Router Works

Full URL         Part that RR cares about
localhost:3000 -> /
localhost:3000/pageone -> /pageone
localhost:3000/posts/5 -> /posts/5
localhost:3000/tweets/new -> /tweets/new
twitter.com/tweets/new -> /tweets/new
airbnb.com/listings/spain -> /listings/spain
google.com/search ->		/search

Only cares about the DOMAIN after /.


history -> Keeps track of the
 		   address bar in your
 		   browser.

-> BrowserRouter(Listens to 'history' for changes to the URL)

-> Route path="/"-> PageOne Component

-> Route path="/PageTwo"(Visible only when the 'path' matches the current URL)  -> PageTwo Component




How Paths Get Matched

We can have multiply Route Components inside.
Nesting them inside.

If you remove the exact keyword and go
to a different page two pages are 
going to be showed without exact-keyword.


Address Bar   Extracted 'path'
myapp:8000/			/ 

->Route Definitions
  -<Route path="/" component={One}/>
  -<Route path="/page" component={Two}/>
  -<Route path="/page/5" component={Three}/>

extractedPath.contains(path)

Will the String contain the string.

When you add exact
extractedPath === path





How to *Not* Navigate with React Router
Easily to navigate through Routes.
<a href="/pagetwo"> Navigate to Page Two </a>

And click on PageTwo.
We can navigation.
We don't want to use anchor-tags.

Bad Navigation
-You add an <a/> tag to your application with href='/pagetwo'
 and click it

-Your browser makes a request to localhost:3000

-Development server responds with index.html file

-Browser receives index.html file, dumps old HTML file
 it was showing (including all of your React/Redux state data!)

-index.html file lists our JS files in script tags
 -browser downloads and executes these scripts

-Our app starts up

All JavaScript data get's dumped.
And you totally lose all your data.




Navigating with React Router
Whenever clicking on the anchor-tag.
To fetch all the files.
Whenever i click a link it dumps many files in the
browser.

So we are using Link-Tag instead.

<Link href="/pagetwo"> Navigate to Page Two </Link>

When you now click on the Links you are not getting 
any files.


What We Want
-User wants to navigate to another page in our app
-User clicks a "Link" tag
-React Router prevents the browser from navigating
 to the new page and fetching new index.html file

-URL still changes
-'History' sees updated URL, takes URL and sends it to
 BrowserRouter
-BrowserRouter communicates the URL to Route components




[Optional]-Different Router Types

-BrowserRouter (Uses everything after the TLD (.com, .net) or port as the 'path') -> localhost:3000/pagetwo

-HashRouter (Uses everything after a# as the path)-> localhost:3000/#/pagetwo

-MemoryRouter Dosen't use the URL to track navigation -> localhost:3000/

TLD = Top Level Domain

HashRouter gives a # automatically.

With MemoryRouter the URL doesn't updates at all.

Why do we care about this?
It comes to deployment.

BrowserRouter.

localhost:3000/pageone 

-> I'm looking for content
   for the route '/pageone'

-> Traditional HTML-Generating Server
   -Do I have a route for /pageone?
   -Yes, I am supposed to generate some
    HTML send it back
   -Respond with HTML document


-> Here is a HTML document back

With a route not found it will return
a 404 not found.


React Case
I'm looking for content for the
route '/pagetwo'

Create-React-App
-Do i have anything special for /pagetwo
-Check dev resources
-Check public dir
-Nope, ok , guess I'll serve up the
 index.html file

 -> I don't know what route
    that is, so I'll just give
    you index.html back


You have to make sure that your server respond with right.
Configured it appriotely.

With the HashRouter always to the localhost:3000.
HashRouter doesn't need to have configuration.
Deployment to Github-Pages.



Component Scaffolding
-Index Page - StreamList Component
-Show Stream - StreamShow Component
-Create Stream- StreamCreate Component
-Edit Stream - StreamEdit Component
-Delete Stream - StreamDelete Component

Hook them up to different Routes.
Decide a path.

Path  Component 
/ -> StreamList
/streams/new -> StreamCreate
/streams/edit -> StreamEdit
/streams/delete -> StreamDelete
/streams/show -> StreamShow

Create a new folder called Streams.
Create five files.



Wiring Up Routes
import all these components from the Component/Streams.
Create separate routes for each of these.
Using exact-keyword.



Always Visible Components
Working on the Header.
A large feature.
                              (Visible depending on the URL)
App -> BrowserRouter         ->Route path="/" -> StreamList Component
							 ->Route path="/streams/new" -> StreamCreate Component
    -> Header -> LoginButton
    (Always Visible)



Connecting the Header
We are going to make a separate Header.
And wire SemanticUI.

Create an new header component.

Header.js

import React from 'react';

const Header = () => {
	return <div> Header</div>;
};

export default Header;

Import the header to the App.js file.
Add semantic UI to the Header component.
Adding Link-Tags.

Get an error:
You should not use <Link>outside a <Router>



Links Inside Routers
Any component that is not a child.

App- BrowserRouter

->Route path ="/" -> StreamList Component
->Route path ="/streams/new" -> StreamCreate Component
->Header-> LoginButton



Exercise Overview - Additional Routes
Consists of multiple components linked togheter.
One Route defined inside it.


Coding Exercise 14: Adding Another Route

import React from 'react';
import { BrowserRouter, Route } from './react-router-dom';
import { Header } from './Header';
import { StreamList } from './StreamList';
import { StreamDetails } from './StreamDetails';

const App = () => {
    return (
        <div className="ui container">
            <BrowserRouter>
                <div>
                    <Header />
                    <Route path="/" exact component={StreamList} />
                    <Route path="/streams/details" exact component={StreamDetails} />

                </div>
            </BrowserRouter>
        </div>
    );
};

export default App;


import React from 'react';
import { Link } from './react-router-dom';

const StreamList = () => {
    return (
        <div className="stream-list">
            <h3>StreamList</h3>
            <Link to="/streams/details"> Go to Stream Details </Link>
        </div>
    );
};

export { StreamList };

import React from 'react';
import { Link } from './react-router-dom';

const StreamDetails = () => {
    return (
        <div className="stream-details">
            <h3>StreamDetails</h3>
            <Link to="/">Go back to Stream List </Link>
        </div>
    );
};

export { StreamDetails };

