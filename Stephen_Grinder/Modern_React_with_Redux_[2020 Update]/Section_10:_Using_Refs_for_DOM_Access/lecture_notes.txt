Grid CSS
CSS is only going to take so far.
Grid-CSS system.
We are going to give a style like a grid-system.

Create a file called image-list.css

.image-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-gap: 10px;
}

.image-list img {
  width: 250px;
}

Talk about the Grid-System.
There are Grid-Slots and put elements in different slots.
We add a additional rule 10 px to have som gap.



Issues with Grid CSS

We are adding a grid-auto-rows.
Cells have been crunched down.
This definatively crunch down images.
grid-row-end: says how many maximmum spaces to been span in.


.image-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  grid-gap: 10px;
  grid-auto-rows: 150px;
}

.image-list img {
  width: 250px;
  grid-row-end: span 2;
}



Creating an Image Card Component

We must specify a maximum-height.
And we are going to create a image-component.
A componment render one image each by itself.


import React from 'react';

class ImageCard extends React.Component {
  render() {
    const { description, urls } = this.props.image;

    return (
      <div>
        <img alt={description} src={urls.regular} />
      </div>
    );
  }
}

export default ImageCard;

We are creating a image within.

In image-list.js

import './ImageList.css';
import React from 'react';
import ImageCard from './ImageCard';

const ImageList = (props) => {
  const images = props.images.map((image) => {
    return <ImageCard key={image.id} image={image} />;
  });

  return <div className="image-list">{images}</div>;
};

export default ImageList;



Accessing the DOM with Refs
Dynamically give some space.

Let the ImageCard render itself and its image
-> Reach into the DOM and figure out the height of the image
-> Set the image height on state to get the componment to rerender
-> When rerendering, assign a 'grid-row-end' to make sure the image
   takes up the appropriate space

Making sure every image takes the appropiate size.
How to reach out to the DOM.

We are using a REF system.

React Refs
-Gives access to a single DOM element
-We create refs in the constructor, assign them to
 instance variables, then pass to a particular JSX
 elements as props



Accessing Image Height

In the Image-card we create a REFS to reference back little
later.

Defining the componmentDiDMount.
Console log out the refs system.
Get access to every image-height.
The console is extremly fancy.
Dosen't know the height of the image yet.
For the Web-Browser.


import React from 'react';

class ImageCard extends React.Component {
  constructor(props) {
    super(props);

    this.imageRef = React.createRef();
  }

  componentDidMount() {
    console.log(this.imageRef);
    console.log(this.imageRef.current.clientHeight);
  }

  render() {
    const { description, urls } = this.props.image;

    return (
      <div>
        <img ref={this.imageRef} alt={description} src={urls.regular} />
      </div>
    );
  }
}

export default ImageCard;

Too early to get the height.
Easy workaround.



Callbacks on Image Load
We are going to add an EventListener.
Going to listen on Event.Load event.

As a callback this.setSpans.
We wanna set the grit-load-span.

import React from 'react';

class ImageCard extends React.Component {
  constructor(props) {
    super(props);

    this.imageRef = React.createRef();
  }

  componentDidMount() {
    this.imageRef.current.addEventListener('load', this.setSpans);
  }

  setSpans = () => {
    console.log(this.imageRef.current.clientHeight);
  };

  render() {
    const { description, urls } = this.props.image;

    return (
      <div>
        <img ref={this.imageRef} alt={description} src={urls.regular} />
      </div>
    );
  }
}

export default ImageCard;



Dynamic Spans

We are going to dynamically set the span.
We take the height divided by spans.
And thereafter set the span value.
And we set the state with setState.


import React from 'react';

class ImageCard extends React.Component {
  constructor(props) {
    super(props);

    this.state = { spans: 0 };

    this.imageRef = React.createRef();
  }

  componentDidMount() {
    this.imageRef.current.addEventListener('load', this.setSpans);
  }

  setSpans = () => {
    const height = this.imageRef.current.clientHeight;

    const spans = Math.ceil(height / 10);

    this.setState({ spans });
  };

  render() {
    const { description, urls } = this.props.image;

    return (
      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>
        <img ref={this.imageRef} alt={description} src={urls.regular} />
      </div>
    );
  }
}

export default ImageCard;



App Review
Cover the big things.
We learned about the EventHandlers.
We did have a big issue with this.
The rule to keep in mind.
event.preventDefault().
We passed a callback function to the children from the parent.
Everytime we reach a list we have to use the map function.
We got a introduction to React.Ref to get access to the DOM.
Learned a little a bit of the CCS-Grid-System.

