Fetching Data
app -> Send me data about pics for "cars" -> Unsplash API
app	 <-			Here you go				  <-  Unsplash API				

unsplash.com/developers

Create an Account.

Give a name to a Application.


Axios vs Fetch

React App -> Ajax -> Send me data about pics for "cars" -> Unsplash API
             Client <-			Here you go				<-  Unsplash API	


Ajax code is using the requests not the React App.

-axios: 3rd party package
-fetch: function built into modern browsers

Axios have already code that is repeated in fetch.

import React from 'react';
import axios from 'axios';
import SearchBar from './SearchBar';

class App extends React.Component {
  onSearchSubmit(term) {}

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar onSubmit={this.onSearchSubmit} />
      </div>
    );
  }
}

export default App;



Viewing Requests Results
We will call axios.get() function.
And a object with opitions {}.
Object is to identify ourselves.
Params to define the query term of the request.


import React from 'react';
import axios from 'axios';
import SearchBar from './SearchBar';

class App extends React.Component {
  onSearchSubmit(term) {
    axios.get('https://api.unsplash.com/search/photos', {
      params: { query: term },
      headers: {
        Authorization:
          'Client-ID 2b98c1afb0aed3b3d94a1866bdc3ac013d21a0c86d236a0fee32355c331c0296',
      },
    });
  }

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar onSubmit={this.onSearchSubmit} />
      </div>
    );
  }
}

export default App;




Handling Requests with Async Await

How to handle the data we get from the request.

Component renders itself one time with no list of images
-> onSearchSubmit method called
-> Request made to unsplash
-> ...wait...
-> Request complete
-> Set image data on state of App component
-> App component rerenders and shows images

In the App.js file:
We get back a promise and chains it with a then.

import React from 'react';
import axios from 'axios';
import SearchBar from './SearchBar';

class App extends React.Component {
    onSearchSubmit(term) {
    const response = axios.get('https://api.unsplash.com/search/photos', {
      params: { query: term },
      headers: {
        Authorization:
          'Client-ID 2b98c1afb0aed3b3d94a1866bdc3ac013d21a0c86d236a0fee32355c331c0296',
      },
    }).then(response => {
         console.log(response.data.results);
    });


    console.log(response.data.results);
  }

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar onSubmit={this.onSearchSubmit} />
      </div>
    );
  }
}

export default App;


Setting State After Async Await Requests

We initialize a state in the App.js file.
As a default value we have an empty array.
That allows us to call some and avoid errors.
Set the states.
And it will cause the component to rerender.
Error: Typeerror: this.setState is not a function.


import React from 'react';
import axios from 'axios';
import SearchBar from './SearchBar';

class App extends React.Component {
  state = { images: [] };

  async onSearchSubmit(term) {
    const response = await axios.get('https://api.unsplash.com/search/photos', {
      params: { query: term },
      headers: {
        Authorization:
          'Client-ID 2b98c1afb0aed3b3d94a1866bdc3ac013d21a0c86d236a0fee32355c331c0296',
      },
    });

    console.log(this);
    this.setState({ images: response.data.results });
  }

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar
          onSubmit={this.onSearchSubmit}
          guesswhtIam="Im the propsobject"
        />
        Found: {this.state.images.length} images
      </div>
    );
  }
}

export default App;



Binding Callbacks

We need to solve this typeerror.
We will turn onSearchSubmit function into a arrow-function.


import React from 'react';
import axios from 'axios';
import SearchBar from './SearchBar';

class App extends React.Component {
  state = { images: [] };

  onSearchSubmit = async (term) => {
    const response = await axios.get('https://api.unsplash.com/search/photos', {
      params: { query: term },
      headers: {
        Authorization:
          'Client-ID 2b98c1afb0aed3b3d94a1866bdc3ac013d21a0c86d236a0fee32355c331c0296',
      },
    });

    this.setState({ images: response.data.results });
  };

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar onSubmit={this.onSearchSubmit} />
        Found: {this.state.images.length} images
      </div>
    );
  }
}

export default App;


Creating Custom Clients
Doing some cleanups.
Create a new folder called API.
Inside it create a new file called unsplash.js.
Create a config for the axios file.
Will create some config instances.

import axios from 'axios';

export default axios.create({
  baseURL: 'https://api.unsplash.com',
  headers: {
    Authorization:
      'Client-ID 2b98c1afb0aed3b3d94a1866bdc3ac013d21a0c86d236a0fee32355c331c0296',
  },
});


Change in the App.js file.

class App extends React.Component {
  state = { images: [] };

  onSearchSubmit = async term => {
    const response = await unsplash.get('/search/photos', {
      params: { query: term }
    });

    this.setState({ images: response.data.results });
  };

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar onSubmit={this.onSearchSubmit} />
        Found: {this.state.images.length} images
      </div>
    );
  }
}

export default App;



