Project Overview
Work on a small App to YouTube.
Learn a lot of going through it.
Videos project.
Rename the folder-
To YouTube Hooks.

App -> SearchBar
    -> VideoList -> VideoItem
    -> VideoDetail



Refactoring the SearchBar

SearchBar dosen't need useEffect().
Because we don't have any Lifecycle Methods.
Remove state declaration.
We must make use of setTerm hook.
Change the event-handeler to onSubmit.

import React, { useState } from 'react';

const SearchBar = ({ onFormSubmit }) => {
  const [term, setTerm] = useState('');

  const onSubmit = (event) => {
    event.preventDefault();

    onFormSubmit(term);
  };

  return (
    <div className="search-bar ui segment">
      <form onSubmit={onSubmit} className="ui form">
        <div className="field">
          <label>Video Search</label>
          <input
            type="text"
            value={term}
            onChange={(event) => setTerm(event.target.value)}
          />
        </div>
      </form>
    </div>
  );
};

export default SearchBar;



Refactoring the App

We need to make use of useState() hook twice.
And useEffect against on a Lifecycle-Method.
Take every return-statement.
Remove this keyword.


import React, { useState, useEffect } from 'react';
import SearchBar from './SearchBar';
import youtube from '../apis/youtube';
import VideoList from './VideoList';
import VideoDetail from './VideoDetail';

const App = () => {
  const [videos, setVideos] = useState([]);
  const [selectedVideo, setSelectedVideo] = useState(null);

  useEffect(() => {
    onTermSubmit('buildings');
  }, []);

  const onTermSubmit = async (term) => {
    const response = await youtube.get('/search', {
      params: {
        q: term,
      },
    });

    setVideos(response.data.items);
    setSelectedVideo(response.data.items[0]);
  };

  const onVideoSelect = (video) => {
    setSelectedVideo(video);
  };

  return (
    <div className="ui container">
      <SearchBar onFormSubmit={onTermSubmit} />
      <div className="ui grid">
        <div className="ui row">
          <div className="eleven wide column">
            <VideoDetail video={selectedVideo} />
          </div>
          <div className="five wide column">
            <VideoList onVideoSelect={onVideoSelect} videos={videos} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;



Removing a Callback

Removing the videoSelect.
And select the state of the video and provide it.


import React, { useState, useEffect } from 'react';
import SearchBar from './SearchBar';
import youtube from '../apis/youtube';
import VideoList from './VideoList';
import VideoDetail from './VideoDetail';

const App = () => {
  const [videos, setVideos] = useState([]);
  const [selectedVideo, setSelectedVideo] = useState(null);

  useEffect(() => {
    onTermSubmit('buildings');
  }, []);

  const onTermSubmit = async (term) => {
    const response = await youtube.get('/search', {
      params: {
        q: term,
      },
    });

    setVideos(response.data.items);
    setSelectedVideo(response.data.items[0]);
  };

  return (
    <div className="ui container">
      <SearchBar onFormSubmit={onTermSubmit} />
      <div className="ui grid">
        <div className="ui row">
          <div className="eleven wide column">
            <VideoDetail video={selectedVideo} />
          </div>
          <div className="five wide column">
            <VideoList onVideoSelect={setSelectedVideo} videos={videos} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;


Overview on Custom Hooks
We are working on a large video site like YouTube.

App Component
-video fetching logic

Analytics Component
-video fetching logic

App Component <- Custom Hook (video fetching logic) -> Analytics Component


Custom Hooks
-Best way to create reusable code in a React project
 (besides components!)

-Created by extracting hook-related code out of a
 function component

-Custom hooks always make use of at least one
 primitive hook internally

-Each custom hook should have one purpose

-Kind of an art form!

-Data-fetching is a great thing to try to make reusable



Process for Building Custom Hooks

Process For Creating Reusable Hooks
-Indentify each line of code related to some single purpose
-Indentify the  inputs to that code
-Indentify the outputs to that code
-Extract all of the code into a separate function,
 receiving the inputs as arguments, and returning
 the outputs


Take a look at each line in the App.js component.
Manage a list of videos and manage a video.
The request we are making to fetch all the videos.
Selection is like derived property.
Just think of the lines of code regarding videos.
videos array and the onTermSubmit as outputs?
We want to take the inputs and the outputs into single line of code.

-If you give me a
 (default search term)

-I will give you
 -a way to search for videos
 -a list of videos




const App = () => {
  const [videos, setVideos] = useState([]);<- Videos
  const [selectedVideo, setSelectedVideo] = useState(null); <- Selection

  useEffect(() => {
    onTermSubmit('buildings'); <- Videos
  }, []);

  const onTermSubmit = async (term) => {
    const response = await youtube.get('/search', {
      params: {
        q: term,
      },
    }); <- Videos

    setVideos(response.data.items); <- Selection
    setSelectedVideo(response.data.items[0]); <-Selection
  };





Extracting Video Logic

We are creating a new custom hook called
useVideos.js.

Our goal is to call for a list of inputs.
Finding all lines of code and copy and paste it
into the useVideos.js hook.

We now moved all our code.
Provide an argument called defaultSearchTerm.
Return a list of videos and one that can be called to modify it.


import { useState, useEffect } from 'react';
import youtube from '../apis/youtube';

const useVideos = (defaultSearchTerm) => {
  const [videos, setVideos] = useState([]);

  useEffect(() => {
    search(defaultSearchTerm);
  }, []);

  const search = async (term) => {
    const response = await youtube.get('/search', {
      params: {
        q: term,
      },
    });

    setVideos(response.data.items);
  };

  return [videos, search];
};

export default useVideos;


Using the Custom Hook

In the App.js file.
We select the first video in the array.
We put in the search() to the child-component.
Think back how to set the selected video.
Call useEffect() whenever the videos changes.


import React, { useState, useEffect } from 'react';
import SearchBar from './SearchBar';
import VideoList from './VideoList';
import VideoDetail from './VideoDetail';
import useVideos from '../hooks/useVideos';

const App = () => {
  const [selectedVideo, setSelectedVideo] = useState(null);
  const [videos, search] = useVideos('buildings');

  useEffect(() => {
    setSelectedVideo(videos[0]);
  }, [videos]);

  return (
    <div className="ui container">
      <SearchBar onFormSubmit={search} />
      <div className="ui grid">
        <div className="ui row">
          <div className="eleven wide column">
            <VideoDetail video={selectedVideo} />
          </div>
          <div className="five wide column">
            <VideoList onVideoSelect={setSelectedVideo} videos={videos} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;



Coding Exercise 10: Another Use of Custom Hooks

import React from 'react';
import usePosts from './usePosts';

export default function App() {
    // Add in code here to use the 'usePosts' hook.
    const posts = usePosts();
    
    const renderedPosts = posts.map((post) => {
        return <li key={post.id}>{post.title}</li>;
    });
    
    return (
        <div>
            <h3>Posts</h3>
            <ul>{renderedPosts}</ul>
        </div>
    );
};


import React from 'react';
const { useState, useEffect } = React;

const usePosts = () => {
  const [posts, setPosts] = useState([]);
  
  useEffect(() => {
    fetch(`https://jsonplaceholder.typicode.com/posts`, {
      "mode": "cors",
      "credentials": "omit"
    }).then(res => res.json())
    .then(data => setPosts(data))

  }, []);

  return posts;
};

export default usePosts;