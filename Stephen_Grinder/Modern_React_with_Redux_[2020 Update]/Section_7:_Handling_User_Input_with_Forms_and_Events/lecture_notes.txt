App Overview

Stuff to Still Figure Out

-How do we get feedback from the user?
-How do we fetch data from some outside API or server?
-How do we show lists of records?

Every web-application is going to work on will fetch data via API.
Type in a basic text-field and shows some lists of images.


Component Design
Talk about the different challenges.

App Challenges
-Need to get search term from the user

-Need to use that search term to make
 a request to an outside API and fetch
 data

-Need to take the fetched images and show
 them on the screen in a list

We could build this in a single component.
We will break up this to several components.

-Searchbar
-Imagelist
-App Component

App -> Searchbar
    -> Imagelist




Adding Some Project Structure
Make an index.js file.

import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App';

ReactDOM.render(<App />, document.querySelector('#root'));

Create an new folder called components.

And a file called App.js

import React from 'react';

const App = () => {
  return <div>App</div>;
};

export default App;



Showing Forms to the User
Creating a Searchbar.js file.

import React from 'react';

class SearchBar extends React.Component {
  render() {
    return (
      <div>
        <form>
          <input type="text" />
        </form>
      </div>
    );
  }
}

export default SearchBar;


Import the SearchBar.js file into App.js

import React from 'react';
import SearchBar from './SearchBar';

const App = () => {
  return (
    <div>
      <SearchBar />
    </div>
  );
};

export default App;




Adding a Touch of Style

In the SearchBar.js file.


import React from 'react';

class SearchBar extends React.Component {
  render() {
    return (
      <div className="ui segment">
        <form className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input type="text" />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;

In the App.js add some style.


import React from 'react';
import SearchBar from './SearchBar';

const App = () => {
  return (
    <div className="ui container" style={{ marginTop: '10px' }}>
      <SearchBar />
    </div>
  );
};

export default App;




Creating Event Handlers
We want some event to handle when a user types in a input.
We are inputing some onInputChange without function call.
We give the function the event-object.
Event object.

Different Events will be related to different events.

-User clicks on something -> onClick
-User changes text in an input -> onChange
-User submits a form -> onSubmit



import React from 'react';

class SearchBar extends React.Component {
  onInputChange(event) {
    console.log(event.target.value);
  }

  render() {
    return (
      <div className="ui segment">
        <form className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input type="text" onChange={this.onInputChange} />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;


Alternate Event Handler Syntax

import React from 'react';

class SearchBar extends React.Component {
  onInputChange(event) {
    console.log(event.target.value);
  }

  render() {
    return (
      <div className="ui segment">
        <form className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input type="text" onChange={e => console.log(e.target.value)} />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;



Uncontrolled vs Controlled Elements

We are going to lock on.
Controlled vs UnControlled

We have created a Uncontrolled handler.
As a React Developer you want to have a Controlled Event.


import React from 'react';

class SearchBar extends React.Component {
  state = { term: '' };

  render() {
    return (
      <div className="ui segment">
        <form className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input
              type="text"
              value={this.state.term}
              onChange={e => this.setState({ term: e.target.value })}
            />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;

Why are using state?



More on Controlled Elements


Controlled Events

Flow -> User types in input 
-> Callback gets invoked
-> We call setState with the new value
-> Component rerenders
->Input is told what its value is (comming from state)


UnControlled Events
React World    HTML World
???				<input value="hi there" />

Before refactor to controlled

What's the value of the input right now?
In some point of time the value was not in our
React World only in HTML world.

We want to centralize our inputs.
We don't want to store data in HTML DOM.

Controlled Events

React World 					DOM World
state ->{term: "hi there"}		<input value={go look at state to get current value} />

What's the value of the input right now?



Exercise Overview - Receiving Values
Look at small exercise.
Password input.
Whenever the user adds text.



Coding Exercise 6: Receiving Values From Controlled Elements


import React from 'react';

class Validator extends React.Component {
    // State is being initialized in a slightly different way than is shown
    // in the previous videos. You can ignore this different syntax for now.
    constructor(props) {
        super(props);
        this.state = { password: '' };
    }
    
    render() {
        return (
            <div className="ui segment">
                <form className="ui form">
                    <div className="field">
                        <label>Enter Password</label>
                        <input 
                            type="password"
                            value={this.state.password}
                            onChange={e => this.setState({password: e.target.value})}
                        />
                    </div>
                    {this.state.password.length < 4 ? 'Password must be at least 4 characters' : ''}
                </form>
            </div>
        );
    }
}

export default Validator;



Handling Form Submittal
Want to trigger a search.
Press the enter key to the backend server.
Disable the default behavior.
event.preventDefault() will prevent default behaviours.


import React from 'react';

class SearchBar extends React.Component {
  state = { term: '' };

  onFormSubmit(event) {
    event.preventDefault();

    console.log(this.state.term);
  }

  render() {
    return (
      <div className="ui segment">
        <form onSubmit={this.onFormSubmit} className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input
              type="text"
              value={this.state.term}
              onChange={e => this.setState({ term: e.target.value })}
            />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;


Understanding 'this' in JavaScript
You are going to this error message all the darn time:
TypeError: Cannot read property 'state' of undefined

undefined is a value in JavaScript.
What this telling us that we cannot reach the undefined state.

-What is 'this' used for in a class?
-How is the value of 'this' determined in a function?

Instance of SearchBar
-state
-render
-onFormSubmit

-this referencing to the state object.

class Car {
	setDriveSounf(sound){
	this.sound = sound;
	}

	drive(){
	return this.sound;
	}
}

const car = new Car();
car.setDriveSound('vroom');
car.drive();

You look at where the function is called.

const truck = {
	sound: 'putputput',
	driveMyTruck: car.drive
}

truck.driveMyTruck




Solving Context Issues

When we bind() we create a new function.

class Car {
    constructor(){
    this.drive = this.drive.bind(this);
    }

	setDriveSound(sound){
	 this.sound = sound;
	}

    drive(){
      return this.sound;
    }
}

const car = new Car();
car.setDriveSound('vroom');
const drive = car.drive;

drive()


We use arrow-functions instead and it will bind it.
It bind it automatically.

import React from 'react';

class SearchBar extends React.Component {
  state = { term: '' };

  onFormSubmit = event => {
    event.preventDefault();

    console.log(this.state.term);
  };

  render() {
    return (
      <div className="ui segment">
        <form onSubmit={this.onFormSubmit} className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input
              type="text"
              value={this.state.term}
              onChange={e => this.setState({ term: e.target.value })}
            />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;



Communicating Child to Parent
The allow purpose searchbar is not to submit a request.
Rather than take the search component and give it to the app component.

Props go down!

App (this.onSearchSubmit) -> SearchBar (this.onSearchSubmit)
                          -> ImageList

User submitted the form?
Better call my callback to tell App!
this.onSearchSubmit



Invoking Callbacks in Children
Refactor the App.js file to a Class component instead.

import React from 'react';
import SearchBar from './SearchBar';

class App extends React.Component {
  onSearchSubmit(term) {
    console.log(term);
  }

  render() {
    return (
      <div className="ui container" style={{ marginTop: '10px' }}>
        <SearchBar onSubmit={this.onSearchSubmit} />
      </div>
    );
  }
}

export default App;

In the form element in SearchBar.js file


import React from 'react';

class SearchBar extends React.Component {
  state = { term: '' };

  onFormSubmit = event => {
    event.preventDefault();

    this.props.onSubmit(this.state.term);
  };

  render() {
    return (
      <div className="ui segment">
        <form onSubmit={this.onFormSubmit} className="ui form">
          <div className="field">
            <label>Image Search</label>
            <input
              type="text"
              value={this.state.term}
              onChange={e => this.setState({ term: e.target.value })}
            />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;

