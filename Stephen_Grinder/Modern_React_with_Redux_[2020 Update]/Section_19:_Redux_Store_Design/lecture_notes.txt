Rules of Reducers
Creating a separate file for each reducer.
PostReducer pull of the response and adding it into some array.

export default () => combineReducers( {
	replaceMe: () => 'hi there'
});

In the index.js file.

import { combineReducers } from 'redux';
import postReducer from './postReducer';

export default combineReducers({
	posts: postsReducer
});

Rules of Reducers
-Must return any value besides 'undefined'
-Produces 'state', or data to be used inside of your app
 using only previous state and the action (reducers are pure)

-Must not return reach 'out of itself' to decide what value to
 return

-Must not mutate its input 'state' argument



Return Values From Reducers

A reducer must always return something.
You can return a string.
You can return a object.
Fails to return a undefined.
A reducer cannot return undefined.



Argument Values
Second rule:

Produces 'state', or data to be used inside of your app
using only previous state and the action

undefined ->
Action #1 -> Reducer -> State v1

First time a reducer is called

The first argument is a undefined.
The second argument is a Acton.

selectedSongReducer(undefined, {type: 'laskdjfl'});

const selectedSongReducer = (selectedSong = null , action) => {
	if(selectedSong === undefined){
	  selectedSong = null;
	}

	if(action.type === 'SONG_SELECTED') {
	  return action.payload;
	}

	return selectedSong;

}

selectedSong is a default value.
The only thing that is changed is the action object.



Pure Reducers

Must not return reach 'out by itself' to decide what
value to return (reducers are pure)

When we call the reducer the only thing we can do is
to return a new value and never call to the DOM or
a API call.

export default () => {
    //Bad
	return documen.querySelector('input')
    
    //Bad
	return axios.get('/posts')

}



Mutations in Javascript
Must not mutate its input 'state' argument

const colors = ['red', 'green']
undefined

colors.push('purple')

colors ['red','green', 'purple']

We have changed its contents.
We can mutate an object also.

We don't wanna do any thing with state = "something".

In JavaScript strings and numbers are immutable.



Equality of Arrays and Objects
const numbers = [1,2,3];
1 === 1
true

"hi" === "hi"
true

Value comparison.
When we comparing the objects we are checking
if it is equal to the memory.

numbers === numbers
true

numbers === [1,2,3]
false




A Misleading Rule
MISLEADING >> Must not mutate its input 'state' argument
Must not mutate its input 'state' argument
-> Just kidding! You can mutate it all day and not
   see any errors!

Its easier to tell beginners 'dont mutate state ever'
than to tell them when they can and can't

Redux never going to get any error message at you.
One little tiny cornercase to make they mutate the
state.

Cornerstate:

We are not going to mutate state ever
-I want you to understand the behind the
 scenes of this rule to help you better
 understand Redux

github.com/reduxjs/redux/

combineReducers.
Going to take an action and dispatch.
for-loop through all the reducer functons.
Return some state value.
Check if the reducer is returning a value of undefined.
Look at the hasChanged value.
hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
Different Array the hasChanged will become true.

return hasChanged ? nextState : state.
This will cause React-Rerender itself.
The reason for this if you accidiently
return same object.

Redux will say no changes and React-App will
not rerender itself.



Safe State Updates in Reducers

You want to change some properties in a object
in a Reducers.

Bad
Removing an element
from an array      -> state.pop: Good: state.filter(element => element !== 'hi')

Adding an element
to an Array 	   -> state.push('hi'): Good: [...state, 'hi']

Replacing an element
in an array          ->state[0] = 'hi': Good: state.map(el => el === 'hi' ? 'bye' :el)


Updating a property
in an object        -> state.name = 'Sam': Good: {state, name:'Sam'}

Adding a property
to an object        -> state.age = 30 -> Good: {...state, age:30}


Removing a property
from an object      -> delete state.name -> Good: {...state, age: undefined}
 											       _.omit(state,'age')




Switch Statements in Reducers

If the action is not a FETCH_POSTS we are just
going to return state

export default (state = [], action) => {
	if(action.type === 'FETCH_POSTS'){
	  return action.payload;
	}

	return state;
};


export default (state = [], action) => {
	switch(action.type){
	  case 'FETCH_POSTS':
	  return action.payload;
	  default:
	     return state:
	}
      

};


Coding Exercise 13: Adding a Reducer Case


export default (state = [], action) => {
    switch (action.type) {
        case 'FETCH_POSTS':
            return action.payload;
        case 'ADD_POST':
            return [...state, action.payload];
        default:
            return state;
    }



Dispatching Correct Values

Every single time our reduces run
we are going to run mapStateToProps function.
We are going to return the default value.
The application is going to be displayed on time
at the screen.

Redux sees that we haven't return same value.
We have some new data in the application.
The mapStateToProps will be called and rendered
a second time.


import React from 'react';
import { connect } from 'react-redux';
import { fetchPosts } from '../actions';

class PostList extends React.Component {
  componentDidMount() {
    this.props.fetchPosts();
  }

  render() {
    console.log(this.props.posts);
    return <div>Post List</div>;
  }
}

const mapStateToProps = state => {
  return { posts: state.posts };
};

export default connect(
  mapStateToProps,
  { fetchPosts }
)(PostList);



List Building

Creating some key-property.
Check the mockup.
Map out the properties.
Call the renderList.


import React from 'react';
import { connect } from 'react-redux';
import { fetchPosts } from '../actions';

class PostList extends React.Component {
  componentDidMount() {
    this.props.fetchPosts();
  }

  renderList() {
    return this.props.posts.map(post => {
      return (
        <div className="item" key={post.id}>
          <i className="large middle aligned icon user" />
          <div className="content">
            <div className="description">
              <h2>{post.title}</h2>
              <p>{post.body}</p>
            </div>
          </div>
        </div>
      );
    });
  }

  render() {
    return <div className="ui relaxed divided list">{this.renderList()}</div>;
  }
}

const mapStateToProps = state => {
  return { posts: state.posts };
};

export default connect(
  mapStateToProps,
  { fetchPosts }
)(PostList);



Displaying Users
/posts.
We have to make a addtional API-request.
If we want to show.

First easy way:

Fetch Post -> Fetch Complete
Fetch Users -> Fetch Complete.

To make it harder we are going to
send a response with 10 users.

Fetch Posts

-> Show posts in PostList
-> Each element in PostList shows UserHeader
-> UserHeader is given ID of user to show
-> Each UserHeader attempts to fetch its user
-> Fetch User
-> Show user in each UserHeader

We are going to create a function
that only does one request each time.




Fetching Singular Records
We are going to create a fetchUser().
Dispatch some action.
Create a UserReducer.

import jsonPlaceholder from '../apis/jsonPlaceholder';

export const fetchPosts = () => async dispatch => {
  const response = await jsonPlaceholder.get('/posts');

  dispatch({ type: 'FETCH_POSTS', payload: response.data });
};

export const fetchUser = id => async dispatch => {
  const response = await jsonPlaceholder.get(`/users/${id}`);

  dispatch({ type: 'FETCH_USER', payload: response.data });
};



Displaying the User Header

Call an action creator.
User header becomming displayed in the UserPosts.
Pass the prop into UserHeader.


import React from 'react';
import { connect } from 'react-redux';
import { fetchUser } from '../actions';

class UserHeader extends React.Component {
  componentDidMount() {
    this.props.fetchUser(this.props.userId);
  }

  render() {
    return <div>User Header</div>;
  }
}

export default connect(
  null,
  { fetchUser }
)(UserHeader);



Finding Relevant Users

We are going to wire up a reducer to catch.
FETCH_USER as action type.
And a default case.


export default (state = [], action) => {
  switch (action.type) {
    case 'FETCH_USER':
      return [...state, action.payload];
    default:
      return state;
  }
};



import { combineReducers } from 'redux';
import postsReducer from './postsReducer';
import usersReducer from './usersReducer';

export default combineReducers({
  posts: postsReducer,
  users: usersReducer
});

Return whatever first element.
Find the user we care about.


import React from 'react';
import { connect } from 'react-redux';
import { fetchUser } from '../actions';

class UserHeader extends React.Component {
  componentDidMount() {
    this.props.fetchUser(this.props.userId);
  }

  render() {
    const user = this.props.users.find(user => user.id === this.props.userId);

    if (!user) {
      return null;
    }

    return <div className="header">{user.name}</div>;
  }
}

const mapStateToProps = state => {
  return { users: state.users };
};

export default connect(
  mapStateToProps,
  { fetchUser }
)(UserHeader);

In the App.js file.


import React from 'react';
import { connect } from 'react-redux';
import { fetchPosts } from '../actions';
import UserHeader from './UserHeader';

class PostList extends React.Component {
  componentDidMount() {
    this.props.fetchPosts();
  }

  renderList() {
    return this.props.posts.map(post => {
      return (
        <div className="item" key={post.id}>
          <i className="large middle aligned icon user" />
          <div className="content">
            <div className="description">
              <h2>{post.title}</h2>
              <p>{post.body}</p>
            </div>
            <UserHeader userId={post.userId} />
          </div>
        </div>
      );
    });
  }

  render() {
    return <div className="ui relaxed divided list">{this.renderList()}</div>;
  }
}

const mapStateToProps = state => {
  return { posts: state.posts };
};

export default connect(
  mapStateToProps,
  { fetchPosts }
)(PostList);



Extracting Logic to MapStateToProps
UserHeader component is to show one user.
On the screen.
Some way to put in the user we care about.
We can do the precalculations.
Instead of put a ton data we can put that into
MapStateToProps.
We can have different files for that.
We get a second argument.
We can reference and get the 


import React from 'react';
import { connect } from 'react-redux';
import { fetchUser } from '../actions';

class UserHeader extends React.Component {
  componentDidMount() {
    this.props.fetchUser(this.props.userId);
  }

  render() {
    const { user } = this.props;

    if (!user) {
      return null;
    }

    return <div className="header">{user.name}</div>;
  }
}

const mapStateToProps = (state, ownProps) => {
  return { user: state.users.find(user => user.id === ownProps.userId) };
};

export default connect(
  mapStateToProps,
  { fetchUser }
)(UserHeader);



That's the Issue!
We get different requests.
We are making 10 requests for 1 user.

UserHeader get's called 10 more often.

Make some way that we don't making too many requests.


Memozing Functions
Couple lines of code.
loadash.com.
It is a utility to write Javascript easier.
Memozis.

Go to some other website.

function getUser(id){
	fetch(id);
	return 'Made a request!';
}


const memoizedGetUser = _.memoize(getUser);
After _.memoize() will return whatever data
we got hand on.


Memozization Issues
Changing some couple lines of code.
We can't memoize functions.

Test with normal function keyword.
Try to memoize the function.
We are returning the same function.
Redux-Thunk will still call this function.
We try to memoize the second function.
We are still getting to many requests.


import _ from 'lodash';
import jsonPlaceholder from '../apis/jsonPlaceholder';

export const fetchPosts = () => async dispatch => {
  const response = await jsonPlaceholder.get('/posts');

  dispatch({ type: 'FETCH_POSTS', payload: response.data });
};

// export const fetchUser = id => async dispatch => {
//   const response = await jsonPlaceholder.get(`/users/${id}`);

//   dispatch({ type: 'FETCH_USER', payload: response.data });
// };

export const fetchUser = function(id) {
  return _.memoize(async function(dispatch) {
    const response = await jsonPlaceholder.get(`/users/${id}`);

    dispatch({ type: 'FETCH_USER', payload: response.data });
  });
};


One Time Memozization

Memomize the fetchUser function.
Move the async down.
We now have correctly memoized it right now.


import _ from 'lodash';
import jsonPlaceholder from '../apis/jsonPlaceholder';

export const fetchPosts = () => async dispatch => {
  const response = await jsonPlaceholder.get('/posts');

  dispatch({ type: 'FETCH_POSTS', payload: response.data });
};

export const fetchUser = id => dispatch => _fetchUser(id, dispatch);
const _fetchUser = _.memoize(async (id, dispatch) => {
  const response = await jsonPlaceholder.get(`/users/${id}`);

  dispatch({ type: 'FETCH_USER', payload: response.data });
});



Alternate Overfetching Solution
We can only fetch one user.

Create a new function called:

fetchPostsAndUsers():
-Call 'fetchPosts'
-Get list of posts
-Find all unique userId's from list of posts
-Iterate over unique userId's
-Call 'fetchUser' with each userId

You want to create Action creators that are
small and compact.

export const fetchUser = id => async dispatch => {
	const response = await jsonPlaceholder.get('/users/${id}');
	dispatch({type: 'FETCH_USER', payload: response.data});
}



Acton Creators In Action Creators!

We must make sure to handle the fetchPosts.
Whatever function that get's called becomes
dispatched.
Redux-Thunk will invoke it.
Await key-word will make sure that we waits.


import _ from 'lodash';
import jsonPlaceholder from '../apis/jsonPlaceholder';

export const fetchPostsAndUsers = () => async dispatch => {
  console.log('About to fetch posts');
  await dispatch(fetchPosts());
  console.log('fetched posts!');
};

export const fetchPosts = () => async dispatch => {
  const response = await jsonPlaceholder.get('/posts');

  dispatch({ type: 'FETCH_POSTS', payload: response.data });
};

export const fetchUser = id => async dispatch => {
  const response = await jsonPlaceholder.get(`/users/${id}`);

  dispatch({ type: 'FETCH_USER', payload: response.data });
};

// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);
// const _fetchUser = _.memoize(async (id, dispatch) => {
//   const response = await jsonPlaceholder.get(`/users/${id}`);

//   dispatch({ type: 'FETCH_USER', payload: response.data });
// });


Finding Unique User Ids
GetState function.
To get access to the second argument.
Íterate over all the users id.
Loadash have their own version of _map().


import _ from 'lodash';
import jsonPlaceholder from '../apis/jsonPlaceholder';

export const fetchPostsAndUsers = () => async (dispatch, getState) => {
  await dispatch(fetchPosts());

  const userIds = _.uniq(_.map(getState().posts, 'userId'));
  userIds.forEach(id => dispatch(fetchUser(id)));
};

export const fetchPosts = () => async dispatch => {
  const response = await jsonPlaceholder.get('/posts');

  dispatch({ type: 'FETCH_POSTS', payload: response.data });
};

export const fetchUser = id => async dispatch => {
  const response = await jsonPlaceholder.get(`/users/${id}`);

  dispatch({ type: 'FETCH_USER', payload: response.data });
};

// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);
// const _fetchUser = _.memoize(async (id, dispatch) => {
//   const response = await jsonPlaceholder.get(`/users/${id}`);

//   dispatch({ type: 'FETCH_USER', payload: response.data });
// });



Quick Refactor with Chain

We have _.chain().
When we call some _.chain() method.
What ever result will get result to next function.


import _ from 'lodash';
import jsonPlaceholder from '../apis/jsonPlaceholder';

export const fetchPostsAndUsers = () => async (dispatch, getState) => {
  await dispatch(fetchPosts());

  _.chain(getState().posts)
    .map('userId')
    .uniq()
    .forEach(id => dispatch(fetchUser(id)))
    .value();
};

export const fetchPosts = () => async dispatch => {
  const response = await jsonPlaceholder.get('/posts');

  dispatch({ type: 'FETCH_POSTS', payload: response.data });
};

export const fetchUser = id => async dispatch => {
  const response = await jsonPlaceholder.get(`/users/${id}`);

  dispatch({ type: 'FETCH_USER', payload: response.data });
};

// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);
// const _fetchUser = _.memoize(async (id, dispatch) => {
//   const response = await jsonPlaceholder.get(`/users/${id}`);

//   dispatch({ type: 'FETCH_USER', payload: response.data });
// });


App Wrapup
We learned about the applyMiddleware.
And after that it is sent to the store.
With Redux-Thunk we could return a function.
There other options.
Redux-Thunk has cornercase if you change in Reducer 
React will not rerender.
