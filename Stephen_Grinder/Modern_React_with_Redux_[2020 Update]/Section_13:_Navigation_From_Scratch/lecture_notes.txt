Navigation in React
We are going to show different Components.
Whenever the user goes to a dropdown we will show dropdown.
We are going to use React-Router.

-React Router has frequent breaking changes
-More important to learn the ideas and theory of Navigation
-We are going to build some Navigation stuff from scratch!
-React-Router will be covered later in the course!!!!!


Basic Component Routing

Route Mappings

localhost:3000/ -> Accordian
localhost:3000/list -> Search
localhost:3000/dropdown -> Dropdown
localhost:3000/translate -> Translate

window.location.pathname === '/' -> Accordian
window.location.pathname === '/list' -> Search
window.location.pathname === '/dropdown' -> Dropdown
window.location.pathname === '/translate' -> Translate

We return the right component whenever we see the path.


import React, { useState } from 'react';
import Accordion from './components/Accordion';
import Search from './components/Search';
import Dropdown from './components/Dropdown';
import Translate from './components/Translate';

const items = [
  {
    title: 'What is React?',
    content: 'React is a front end javascript framework',
  },
  {
    title: 'Why use React?',
    content: 'React is a favorite JS library among engineers',
  },
  {
    title: 'How do you use React?',
    content: 'You use React by creating components',
  },
];

const options = [
  {
    label: 'The Color Red',
    value: 'red',
  },
  {
    label: 'The Color Green',
    value: 'green',
  },
  {
    label: 'A Shade of Blue',
    value: 'blue',
  },
];

const showAccordion = () => {
  if (window.location.pathname === '/') {
    return <Accordion items={items} />;
  }
};

const showList = () => {
  if (window.location.pathname === '/list') {
    return <Search />;
  }
};

const showDropdown = () => {
  if (window.location.pathname === '/dropdown') {
    return <Dropdown />;
  }
};

const showTranslate = () => {
  if (window.location.pathname === '/translate') {
    return <Translate />;
  }
};

export default () => {
  return (
    <div>
      {showAccordion()}
      {showList()}
      {showDropdown()}
      {showTranslate()}
    </div>
  );
};



Building a Reusable Route Component
We are building a reusable component.


const Route = ({ path, children }) => {
  return window.location.pathname === path ? children : null;
};

export default Route;


And now to App.js file.

  export default () => {
  const [selected, setSelected] = useState(options[0]);

  return (
    <div>
      <Route path="/">
        <Accordion items={items} />
      </Route>
      <Route path="/list">
        <Search />
      </Route>
      <Route path="/dropdown">
        <Dropdown
          label="Select a color"
          options={options}
          selected={selected}
          onSelectedChange={setSelected}
        />
      </Route>
      <Route path="/translate">
        <Translate />
      </Route>
    </div>
  );
};

We can insert at any place in the Applicaton.

 
Implementing a Header for Navigation

Creating a header.js file.

import React from 'react';
import Link from './Link';

const Header = () => {
  return (
    <div className="ui secondary pointing menu">
      <Link href="/" className="item">
        Accordion
      </Link>
      <Link href="/list" className="item">
        Search
      </Link>
      <Link href="/dropdown" className="item">
        Dropdown
      </Link>
      <Link href="/translate" className="item">
        Translate
      </Link>
    </div>
  );
};

export default Header;

There is a downside to this technique.



Handling Navigation
Every time one click on some link some requests
are being made.

There was how the traditional Navigation was made.
The HTML is being reloaded.
We already reloaded all these different assets.

User clicks on 'List'
-Change the URL, but don't do a full page refresh!

-Each Route could detect the URL has changed

-Route could update piece of state tracking the current pathname

-Each Route Rerenders, showing/hiding components appropriately



Building a Link

We are create a new Component called a Link.
We are going to build a Navigation Event.
We are going to add a onClick handler.

Header -> Link

Route -> Accordion
Route -> Search
Route -> Dropdown
Route -> Translate

import React from 'react';

const Link = ({ className, href, children }) => {
  const onClick = (event) => {
    event.preventDefault();
  };

  return (
    <a onClick={onClick} className={className} href={href}>
      {children}
    </a>
  );
};

export default Link;

And in the Header.js file.

import React from 'react';
import Link from './Link';

const Header = () => {
  return (
    <div className="ui secondary pointing menu">
      <Link href="/" className="item">
        Accordion
      </Link>
      <Link href="/list" className="item">
        Search
      </Link>
      <Link href="/dropdown" className="item">
        Dropdown
      </Link>
      <Link href="/translate" className="item">
        Translate
      </Link>
    </div>
  );
};

export default Header;



Changing the URL

We are using window.history.pushState
To keep it sync with the browser.

import React from 'react';

const Link = ({ className, href, children }) => {
  const onClick = (event) => {
    event.preventDefault();
    window.history.pushState({}, '', href);
  };

  return (
    <a onClick={onClick} className={className} href={href}>
      {children}
    </a>
  );
};

export default Link;




Detecting Navigation

We are going to provide the dispatchEvent().
To notify that the URL has changed to the component.

import React from 'react';

const Link = ({ className, href, children }) => {
  const onClick = (event) => {
    event.preventDefault();
    window.history.pushState({}, '', href);

    const navEvent = new PopStateEvent('popstate');
    window.dispatchEvent(navEvent);
  };

  return (
    <a onClick={onClick} className={className} href={href}>
      {children}
    </a>
  );
};

export default Link;

And in the Route.js file.
We are adding a Eventlistener.
That listen to if the location changed.


import { useEffect } from 'react';

const Route = ({ path, children }) => {
  useEffect(() => {
    const onLocationChange = () => {
      console.log('Location Change');
    };

    window.a


Updating the Route
We are going to set the currentPath.
Where ever to current path.
Make the component a little more sense.


import { useEffect, useState } from 'react';

const Route = ({ path, children }) => {
  const [currentPath, setCurrentPath] = useState(window.location.pathname);

  useEffect(() => {
    const onLocationChange = () => {
      setCurrentPath(window.location.pathname);
    };

    window.addEventListener('popstate', onLocationChange);

    return () => {
      window.removeEventListener('popstate', onLocationChange);
    };
  }, []);

  return currentPath === path ? children : null;
};

export default Route;


Handling Command Clicks

Check if the key was clicked or not.
Navigate to the tab.


import React from 'react';

const Link = ({ className, href, children }) => {
  const onClick = (event) => {
    if (event.metaKey || event.ctrlKey) {
      return;
    }

    event.preventDefault();
    window.history.pushState({}, '', href);

    const navEvent = new PopStateEvent('popstate');
    window.dispatchEvent(navEvent);
  };

  return (
    <a onClick={onClick} className={className} href={href}>
      {children}
    </a>
  );
};

export default Link;

