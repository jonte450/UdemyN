STS Overview
-Allows to grant limited and temporary access to AWS resources
 (up to 1 hour)

-AssumeRole: Assume roles within your account or cross account
-AssumeRoleWithSAML: return credentials for users logged with 
 					 SAML

-AssumeRoleWithWebIdentity
 -return creds for users logged with an IdP
  (Facebook Loginm, Google Login, OIDC compatible)

 -AWS recommends against using this, and using Cognito Identity
  Pools instead

-GetSessionToken: for MFA, from a user or AWS account root user
-GetFederationToken: obtain temporary creds for a federated user
-GetCallerIdentity: return details about the IAM user or
					role used in the API call

-DecodeAuthorizationMessage: decode error message when an 
							 AWS API is denied


Using STS to Assume a Role
-Define an IAM Role within your account or cross account
-Define which principals can access this IAM Role
-Use AWS STS (Security Token Service) to retrieve credentials
 and impersonate the IAM Role you have access to
 (AssumeRole API)

-Temporary credentials can be valid between 15 minutes to 1 hour

STS with MFA
-Use GetSessionToken from STS
-Appropriate IAM policy using IAM Conditions
-aws:MultiFactorAuthPresent:true


-Reminder, GetSessionToken
 returns:
  -Access ID
  -Secret Key
  -Session Token
  -Expiration date



Advanced IAM

Advanced IAM - Authorization Model
Evaluation of Policies simplified
-1. If there's an explicit DENY, end decision and DENY
-2. If there's an ALLOW, end decision with ALLOW
-3. Else DENY


Decision
Starts at DENY -> Evaluate all applicable ->
					Policies


-> Explicit Deny?    ->    Allow         ->    Final 
											 decision = "deny"     
                     No     |			 No
       |				   \ / Yes
      \/ Yes 			Final decision = "allow"

Final decision = "deny"



IAM Policies & S3 Bucket Policies
-IAM Policies are attached to users, roles, groups
-S3 Bucket Policies are attached to buckets
-When evaluating if an IAM Principal can perform an operation
 X on a bucket, the union of its assigned IAM Policies and 
 S3 Bucket Policies will be evaluated


IAM Policy + S3 Bucket Policy = Total Policy Evaluated


Example I
-IAM Role attached to EC2 instance, authorizes RW to
 "my bucket"

-No S3 Bucket Policy attached 

-=> EC2 instance can read and write to "my_bucket"



Example 2
-IAM Role attached to EC2 instance, authorizes RW to "my_bucket"
-S3 Bucket Policy attached, explicit deny to the IAM Role

-=> EC2 instance cannot read and write to "my_bucket"


Example 3
-IAM Role attached to EC2 instance, no S3 bucket permissions
-S3 Bucket Policy attached, explicit RW allow to the IAM Role

-=> EC2 instance can read and write to "my_bucket"


Example 4
-IAM Role attached to EC2 instance, explicit deny S3 bucket
 permissions

-S3 Bucket Policy attached, explicit RW allow to the IAM Role

-=> EC2 instance cannot read and write to "my_bucket"



Dynamic Policies with IAM
-How do you assign each user a /home/<user> folder in an 
 S3 bucket?

-Option 1:
 -Create an IAM policy allowing georges to have access to
  /home/georges
 -Create an IAM policy allowing sarah to have access to
  /home/sarah
 -Create an IAM policy allowing matt to have access to
  /home/matt
 -... One policy per user!
 -This doesn't scale

-Option 2:
 -Create one dynamic policy with IAM
 -Leverage the special policy variable ${aws:username}


Dynamic Policy example

{
	"Sid": "AllowAllS3ActionsInUserFolder",
	"Action": ["s3:*"],
	"Effect" : "Allow",
	"Resource": ["arn:aws:s3:::my-company/home/${aws:username}/*"]
}


Inline vs Managed Policies
-AWS Managed Policy
 -Maintained by AWS
 -Good for power users and administrators
 -Updated in case of new services / new APIs

-Customer Managed Policy
 -Best Practice, re-usable, can be applied to many prinicipals
 -Version Controlled + rollback, central change management

-Inline
 -Strict one-to-one relationship between policy and prinicipal
 -Policy is deleted if you delete the IAM prinicipal



Granting a User Permissions to Pass a Role to an AWS Service
-To configure many AWS services, you must pass an IAM role to 
 the service (this happens only once during setup)

-The service will later assume the role and perform actions
-Example of passing a role:
 -To an EC2 instance
 -To a Lambda function
 -To an ECS task
 -To CodePipeline to allow it to invoke other services

-For this, you need the IAM permissions iam:PassRole
-It often comes with iam:GetRole to view the role being
 						 passed




IAM PassRole example

{
 "Version": "2012-10-17",
 "Statement": [
 {
  "Effect": "Allow",
  "Action": [
			"ec2:*"
	],
	"Resource": "*"
 },
 {
  "Effect": "Allow"
  "Action": "iamPassRole",
  "Resource":"arn:aws:iam:123456789012:role/S3Access"

 }
 ]
	
}

Can a role be passed to any service?
-No: Roles can only be passed to what their trust allows
-A trust policy for the role that allows the service to
 assume the role

{
 "Version": "2012-10-17",
 "Statement": {
  "Sid": "TrustPolicyStatementThatAllowsEC2ServiceToAssumeTheAttachedRole",
  "Effect": "Allow",
  "Prinicipal": {
  		"Service": "ec2.amazonaws.com"
  },
  "Action": "sts:AssumeRole"
 }	

}



Directory Services - Overview
What is Microsoft Active Directory (AD)?

-Found on any Windows Server with AD Domain Services


-Database of objects: User Accounts, Computers, Printers,
					  File Shares, Security Groups


-Centralized security management, create account,
 assign permissions


-Objects are organized in trees

-A group of trees is a forest

AWS Directory Services
-AWS Managed Microsoft AD
 -Create your own AD in AWS, manage users
  locally, supports MFA
 -Establish "trust" connections with your on-premise AD

-AD Connector
 -Directory Gateway (proxy) to redirect to on-premise AD
 -Users are managed on the on-premise AD

-Simple AD
 -AD-compatible managed directory on AWS
 -Cannot be joined with on-premise AD



Quiz 24: Advanced IAM Quiz 

Question 1:
We need to gain access to a Role in another AWS account.
How is it done?

Answer:
   We should use the STS service to gain temporary credentials



Question 2:
An EC2 instance has an IAM instance role attached to it, providing it read and write access to the S3 bucket "my_bucket". You have tested the IAM instance role and both reads and writes are working. You then remove the IAM role from the EC2 instance and test both read and write again. Writes stopped working but Reads are still working. 

What is the likely cause of this behavior?   

Answer:
   The S3 bucket policy authorizes reads

  When evaluating an IAM policy of an EC2 instance doing actions on S3, the union of both the IAM policy of the EC2 instance and the bucket policy of the S3 bucket are taken into account.


Question 3:
What's this IAM policy allowing you to do?

{
    "Version": "2012-10-17",
    "Id": "Secret Policy",
    "Statement": [
        {
            "Sid": "EC2",
            "Effect": "Allow",
            "Action": "ec2:*",
            "Resource": "*"
        },
        {
            "Sid": "Passrole",
            "Effect": "Allow",
            "Action": [
                "iam:PassRole"
            ],
            "Resource": "arn:aws:iam:::role/RDS-*"
        }
    ]
}

Answer:
 Allowing you to assign IAM Roles to EC2 if they start with
 "rds"




Question 4:
Your AWS account is now growing to 200 users and you would like to provide each of these users a personal space in the S3 bucket "my_company_space" with the prefix /home/<username>, where they have read/write access. How can you do this efficiently?


Answer:
  Create one customer-managed policy with dynamic variables
  and attach it to a group of all users


