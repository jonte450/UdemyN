ECS Section Introduction
-New section at the exam - some tricky questions
-Docker Introduction
-ECS
 -Cluster
 -Services
 -Tasks
 -Tasks Definition

-ECR
-Fargate
-Exam Tips




What is Docker?
-Docker is a software development platform to deploy apps
-Apps are packaged in containers that can be run on any OS
-Apps run the same, regardless of where they're run
 -Any machine
 -No compatibility issues
 -Predictable behavior
 -Less work
 -Easier to maintain and deploy
 -Works with any language, any OS, any technology





ECS Clusters
-ECS Clusters are logical grouping of EC2 instances
-EC2 instances run the ECS agent (Docker container)
-The ECS agents regiesters the instance to the ECS cluster
-The EC2 instances run a special AMI, made specifially for ECS


Start ECS with Fargate.
Create Cluster.
Networking only.
cluster-demo.
On-Demand Instance.
t2.micro.

Reuse the vpc we have.

Provision.

One container ECS container active.





ECS Task Definition
-Tasks definitions are metadata in JSON form to tell
 ECS how to run a Docker Container


-It contains crucial information around:
 -Image Name
 -Port Binding for Container and Host
 -Memory and CPU required
 -Enviroment variables
 -Networking information


Map port 8080 to port 80 on to the container.

my-httpd
Task Role
Network mode
Task execution role.
Choose task memory
Reserve 300 mb memory and Task CPU(Unit)
Add container httpd.
Let's choose the image.
Port mapping to map the port.




ECS Service
-ECS Services help to define how many tasks should run and
 how they should be run

-They ensure that the number of tasks desired is running across
 our fleet of EC2 instances.

-They can be linked to ELB / NLB / ALB if needed


Replica how many tasks we are going to run.
Minimum healthy procent.
Define how the deployment is done.
Must add a security group.
docker ps
We can scale our clusters and run our tasks.
Now we have two containers running.





ECS Service with Load Balancers
Httpd service to run on different.
Every time we lance a httpd host it becomes difficult.

Application Load Balancer.

Assign a role.
The same memory.
The same cpu.

We now have two deployment.
We have two running tasks.
Let's look at the port.

curl localhost:32769
curl localhost:32678
Choose Application Load Balancer.
For dynamic hostning.
Allow to talk to any ec2 instances.
Add a security group.



ECR - Part 1
-So far we've been using Docker images from Docker Hub
 (public)

-ECR is a private Docker image reposistory

-Access is controlled through IAM (permission errors => policy)

-AWS CLI v1 login command (may be asked at the exam)
 -$(aws ecr get-login --no-include-email --region eu-west-1)

AWS CLI v2 login command (newer, may also be asked at the exam - pipe)
 -aws ecr get-login-password --region eu-west-1 |docker login --username AWS --password-stdin 1234567890.dkr.ecr.eu-west-1.amazonaws.com

Docker Push & Pull:
 -docker push 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest

 -docker pull 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest

Install docker
And check docker --version

docker build -t my-httpd-image  .


aws ecr get-login-password --region eu-west-1 |docker login --username AWS --password-stdin 1234567890.dkr.ecr.eu-west-1.amazonaws.com



Go to ECR reposistory and create a demo.




ECR - Part 2
Go to clusters.
Update httpd server.

Pull image

1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest



Fargate
-When launching an ECS Cluster, we have to create our
 EC2 instances

-If we need to scale, we need to add EC2 instances

-So we manage infrastructure...


-With Fargate, it's all Serverless!
-We don't provision EC2 instances
-We just create task definitions, and AWS will run our
 containers for us

-To scale, just increase the task number. Simple!
 No more EC2 :)


fargate demo
Let's create our first server.
Create an new task definition.
Add container
1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest
We define task as a number.
Rolling update.
Select the three subnets.
                                                                                                                                                                                                                                                     D
Delete a rule.

There is no EC2 instance in Fargate.



ECS IAM Deep Dive & Hands On
We have an EC2 instance

-EC2 Instance Profile
 -Used by the ECS agent
 -Makes API calls to ECS service
 -Send container logs to CloudWatch Logs
 -Pull Docker image from ECR


-ECS Task Role:
 -Allow each task to have specific role
 -Use different roles for the different ECS services you run
 -Task Role is defined in the task definition

Elastic Container Service Task




ECS Task Placement and Constraints
-When a task of type EC2 is launched,
 ECS must determine where to place it,
 with the constraints of CPU,
 memory, and available port


-Simialry, when a service scales in ECS needs to
 determine which tasks to terminate


-To assist with this, you can define a task
 placement strategy and task placement
 constraints

-Note: this is only for ECS with EC2,
 not for Fargate


ECS Task Placement Process

-Task placement stratergies are a best effort


-When Amazon ECS place tasks, it uses the following process
 to select container instances:

 1. Indentify the instances that satisfy the CPU, memory, and 
    port requirements in the task definition

 2. Indentify the instances that satisfy the task placement
    constraints

 3. Indentify the instances that satisfy the task placement
 	strategies

 4. Select the instances for task placement.

 -Binpack
  -Place tasks based on the least available
   amount of CPU or memory

  -This minimizes the number of instances in
   use(cost savings)


-Random
 -Place the task randomly



-Spread
 -Place the task evenly based on the specified value

 -Example: instanceld,
 		   attributes.availability-zone

 -You can mix them togheter



ECS Task Placement Contstraints

-distinctInstance: place each task on a different container
                   instance


memberOf: places task on instances that satisfy an expression
		  -Uses the Cluster Query Language (advanced)




ECS Auto Scaling

-CPU and RAM is tracked in CloudWatch at the ECS service level
-Target Tracking: target a specific average CloudWatch metric
-Step Scaling: scale based on CloudWatch alarms
-Scheduled Scaling: based on predictable changes


-ECS Service Scaling(task level) not equal EC2 Auto Scaling
                                           (instance level)

-Fargate Auto Scaling is much easier to setup
(because serverless)


ECS - Cluster Capacity Provider

-A Capacity Provider is used in association with a cluster
 to determine the infrastructure that a task runs on
  -For ECS and Fargate users, the  FARGATE_SPOT capacity
   providers are added automatically

  -For Amazon ECS on EC2, you need to associate the capacity
   provider with an auto-scaling group


-When you run a task or a service, you define a capacity 
 provider strategy, to prioritize in which provider to run.

-This allows the capacity provider to automatically provision
 infrastructure for you


ECS - Cluster Capacity Provider

When EC2 have for example below CPU < 30% it starts a new 
task or a new Fargate Container.

We have created our first new capacity provider.


ECS Summary & Exam Tips
-ECS is used to run Docker containers and has 3 flavors

-ECS "Classic": provision EC2 instances to run containers onto

-Fargate: ECS Serverless, no more EC2 to provision

-EKS: Managed Kubernetes by AWS


ECS Classic

-EC2 instances must be created
-We must configure the file /etc/ecs/esc.config with the
 cluster name

-The EC2 instance must run an ECS agent

-EC2 instances can run multiple containers on the same type:
 -You must not specify a host port (only container port)

 -You should use an Application Load Balancer with the 
  dynamic port mapping

 -The EC2 instance security group must allow traffic from the
  ALB on all ports


-ECS tasks can have IAM Roles to execute actions against AWS

-Security groups operate at the instance level, not task level



ECR is used to store Docker Images
-ECR is tightly integrated with IAM
-AWS CLI v1 login command (may be asked at the exam)
 -$(aws ecr get-login --no-include-email --region eu-west-1)
 -"aws ecr get-login" generates a "docker login" command

-AWS CLI v2 login command 
 (newer, may also be asked at the exam - pipe)
 -aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 1234567890.dkr-ecr.eu-west-1.amazonaws.com


-Docker Push & Pull
 -docker push 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest
 -docker pull 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest 

Fargate
-Fargate is Serverless (no EC2 to manage)
-AWS provisions containers for us and assignes them ENI
-Fargate containers are provisioned by the container spec
 (CPU / RAM)

-Fargate tasks can have IAM Roles to execute actions against
 AWS


ECS Other
-ECS does integrate with CloudWatch Logs:
 -You need to setup logging at the task definition level
 -Each container will have a different log stream
 -The EC2 Instance Profile needs to have the correct
  IAM permissions
-Use IAM Task Roles for your tasks
-Task Placement Strategies: binpack,random,spread
-Service Auto Scaling with targer tracking, step scaling,
 or scheduled
-Cluster Auto Scaling through Capacity Providers



ECS Section Cleanup


Quiz 12: ECS Quiz

Question 1:

You are looking to run Microservices with Docker containers. Which service can help you manage these containers ?

Answer:
 ECS



Question 2:

Which ECS config must you enable in /etc/ecs/ecs.config to allow your ECS tasks to endorse IAM roles?

Answer:
ESC_ENABLE_TASK_IAM_ROLE

Although this wasn't discussed during the hands on, you need to know about that important setting in the ecs.config file


Question 3:

You are looking to push Docker images into ECR with your AWS CodePipeline and CodeBuild. The last step fails with an authorization issue. What is the issue?


Answer:
   Double check your IAM permissions for CodeBuild service


Any permissions issues against ECR is most likely due to IAM policies



Question 4:

You are looking to run multiple instances of the same application on the same EC2 instance and expose it with a load balancer. The application is available as a Docker container. You should use

Answer:
   Application Load Balancer + ECS

Uses the dynamic port feature



Question 5:

You are running a web application on ECS, the Docker image is stored on ECR, and trying to launch two containers of the same type on EC2. The first container starts, but the second one doesn't. You have checked and there's enough CPU and RAM available on the EC2 instance. What's the problem?

Answer:
 The host port is defined in the task definition


To enable random host port, set host port = 0 (or empty), which allows multiple containers of the same type to launch on the same instance


Question 6:
You have started an EC2 instance and it's not registered with the ECS cluster. What's NOT a reason for this issue?

Answer:
   The security groups on the EC2 instance are misconfigured

  security groups do not matter when an instance registers with the ECS service


Question 7:

Which commands must be used to pull an image from ECR? (CLI v1)


Answer:

 $(aws ecr get-login --no-include-email)
 docker pull $ECR_IMAGE_URL

You must know these two commands


Question 8:

You would like to run 4 ECS services on your ECS cluster, which need access to various services. What is the best practice?

Answer:
 Create 4 ECS task roles and attach them to the relevant
 ECS task definition



Question 9:
Which task cluster placement is the MOST cost-efficient?

Answer:
 binpack


 










