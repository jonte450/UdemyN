Module Introduction
How can we Debug Node-js.


Understanding NPM Scripts
We had to write node App.js to start the server.
We can use scripts to start the App.
We can use NPM.
npm init

it will ask a couple of questions.
You get a packet.json file.
We get a Scripts-section.
add start to the scripts name.
Run npm start to run the project.

Installing 3rd Party Packages
npm & Packages
-Local Project
-<Your Code>
-Core Node Packages
-Dependencies (3rd Party)
 -express
 -body-parser 

How to add a 3rd party Packages
npm install nodemon --save-dev 
It will install it into the project.


Global Features vs Core Modules vs Third-Party Modules

The last lectures contained important concepts about available Node.js features and how to unlock them.

You can basically differentiate between:

Global features: Keywords like const or function but also some global objects like process

Core Node.js Modules: Examples would be the file-system module ("fs"), the path module ("path") or the Http module ("http")

Third-party Modules: Installed via npm install - you can add any kind of feature to your app via this way

Global features are always available, you don't need to import them into the files where you want to use them.

Core Node.js Modules don't need to be installed (NO npm install is required) but you need to import them when you want to use features exposed by them.

Example:

const fs = require('fs');

You can now use the fs object exported by the "fs" module.

Third-party Modules need to be installed (via npm install in the project folder) AND imported.

Example (which you don't need to understand yet - we'll cover this later in the course):

// In terminal/ command prompt
npm install --save express-session
// In code file (e.g. app.js)
const sessions = require('express-session');


Using Nodemonn for Autorestarts
Run node js in the end.


Global & Local npm Packages

In the last lecture, we added nodemon as a local dependency to our project.

The good thing about local dependencies is that you can share projects without the node_modules folder (where they are stored) and you can run npm install in a project to then re-create that node_modules folder. This allows you to share only your source code, hence reducing the size of the shared project vastly.

The attached course code snippets also are shared in that way, hence you need to run npm install in the extracted packages to be able to run my code!

I showed that nodemon app.js would not work in the terminal or command line because we don't use local dependencies there but global packages.

You could install nodemon globally if you wanted (this is NOT required though - because we can just run it locally): npm install -g nodemon would do the trick. Specifically the -g flag ensures that the package gets added as a global package which you now can use anywhere on your machine, directly from inside the terminal or command prompt.



Understanding different  Error Types
Types of Errors
-Syntax Erros
-Runtime Errors
-Logical Erros



Findimong & Fixing Syntax Errors
We should take a closer look.
Other should that we forget closing bracket.


Dealing with Runtime Errors
Something with headers set.
Call to set headers.
Route to set headers.


Logical Errors
This is the hardest errors.
We trying to switch on the split array.
Choose start debugging.
Set some breakpoint to analyze the code.



Using the Debugger
Testing sending message.
Some code is skipped.
Continue with the other lines.
We can see that split message is returning wrong value.


Restarting the Debugger Automatically After Editing Our App
You can run operations while it is running.
You can run it in the console.
Nice if the debugger restarted it also when we change.
Add launch.json file.
Add configuration.json file

"restart" : true,
"runtimeExecutable": "nodemon",
"console": "integratedterminal"



Debugging Node.js in Visual Studio Code
Want to dive super-deep into the latest debugging capabilities Visual Studio Code gives you (for Node.js apps)?

This article will be very helpful: https://code.visualstudio.com/docs/nodejs/nodejs-debugging



Changing Va≈ïiables in the Debug Console
Go to the debug body.
Change the parsedBody.


Wrap Up

Module Summary
-npm
 -npm stands for "Node Package Manager"
  and it allows your Node project and
  its dependcies

 -You can initialize a project with npm init

 -npm scripts can be defined in the package.json
  to give you "shortouts" to common tasks/ commands

-3rd Party Packages

 -Node projects typically don't just use core modules
  and custom code but also third-party packages
 
 -You can install them via npm

 -You can differentiate between production
  dependcies (--save), development dependcies
  (--save-dev) and global dependcies (-g)

Types of Errors
-Syntax,runtime and lgical errors can break your app
-Syntax and runtime errors throw (helpful) error
 messages (with line numbers!)
-Logical errors can be fixed with testing and the help of
 the debuggers


-Debugging
 -Use the VS Code Node debugger to
  step into your code and go through
  it step by step

 -Analyze variable values at runtime

 -Look into (and manipulate) variables at runtime

 -Set breakpoints cleverly
  (i.e. respect the async/ event-driven nature)

  



Useful Resources & Links
Attached, you find the source code for this section.

When using my source code, make sure to run npm install in the extracted folder!

Useful resources:

More on debugging Node.js: https://nodejs.org/en/docs/guides/debugging-getting-started/

Debugging Node in Visual Studio Code: https://code.visualstudio.com/docs/nodejs/nodejs-debugging







